# https://www.keycloak.org/
# https://www.keycloak.org/getting-started/getting-started-kube
# https://www.keycloak.org/server/importExport
---
- name: Install Keycloak on RKE cluster
  hosts: "{{ rke_control_plane_host }}"
  gather_facts: false
  vars_files:
    - vars/kubernetes.yml
    - vars/monitoring.yml
    - vars/postgresql.yml
    - vars/keycloak.yml
  vars:
    # required kubernetes>=24.2 package only in user virtualenv
    ansible_python_interpreter: "{{ venv_python_interpreter }}"
    kubeconfig: "{{ rke_kubeconfig }}"
    secret_ns: "{{ keycloak_namespace }}"
    create_ns: false
    release: "{{ keycloakx_release_name }}"
  pre_tasks:
    - name: Is the monitoring stack ready?
      # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/include_tasks_module.html
      ansible.builtin.include_tasks: tasks/monitoring/stackready.yml
      when: monitoring_stack_ready is not defined

    - name: Get the PostgreSQL image used
      ansible.builtin.include_tasks: tasks/postgresql/image.yml
      when: postgresql_image is not defined

    # keycloak.sql was generated by pg_dump after Keycloak's Liquibase engine initialized
    # an empty database. It contains the master realm and bootstrap admin user, and later
    # customized with "erhhung" as secondary admin user, and a new realm called "homelab"
    # that is similarly customized with SMTP config using iCloud and several OIDC clients
    # pg_dump --no-owner --no-privileges --schema public \
    #    -h pg.fourteeners.local -U keycloak -d keycloak > keycloak.sql
    - name: Read encrypted keycloak.sql
      delegate_to: localhost
      vars:
        # gzip-compressed and base64-encoded SQL is
        # ~80K, well under 256K limit for ConfigMap
        db_file: files/keycloak/keycloak.sql.gz.age

        # use the default Python interpreter on Ansible controller
        ansible_python_interpreter: "{{ default_python_interpreter }}"
      # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/shell_module.html
      ansible.builtin.shell: |
        set -eo pipefail

        age_file="{{ db_file }}"
        tmp_file="/tmp/$(basename "$age_file")"
        b64_file="${tmp_file/%.age/.b64}"
        sql_file="${b64_file%.gz.b64}"

        cp -f "$age_file" /tmp
        ./gzage.sh "$tmp_file"

        # --no-name ignores timestamp!
        gzip -9ncq "$sql_file" | base64
        rm   -f    "$sql_file"
      args:
        executable: /bin/bash
      register: keycloak_sql
      changed_when: false

    # - name: Show {{ keycloak_sql_gz_b64 }} MD5
    #   # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/debug_module.html
    #   ansible.builtin.debug:
    #     # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/md5_filter.html
    #     msg: "{{ keycloak_sql.stdout | ansible.builtin.md5 }}"
  tasks:
    - name: Create Keycloak database secret
      vars:
        # Java requires key file to
        # be in PKCS#8 / DER format
        secret_name: "{{ keycloak_secrets['database'] }}"
        create_ns: true
        cert_name: keycloakx-database
        der_key: true
        days: 365
        sans:
          - "{{ keycloak_db_user }}"
          - "{{ keycloak_db_user }}@{{ homelab_domain }}"
      ansible.builtin.include_tasks: tasks/k8s/secrets/tls.step.yml

    - name: Create Keycloak ingress secret
      vars:
        secret_name: "{{ keycloak_secrets['ingress'] }}"
        cert_name: keycloakx-ingress
        sans_:
          - "{{ keycloak_fqdns }}"
          - "*.{{ keycloak_namespace }}.svc.{{ cluster_domain }}"
          - "*.{{ keycloak_namespace }}.svc"
        sans: "{{ sans_ | flatten }}"
      ansible.builtin.include_tasks: tasks/k8s/secrets/tls.step.yml

    - name: Create monitoring scraper secret
      ansible.builtin.include_tasks: tasks/monitoring/scraper.yml

    - name: Create {{ keycloak_configmaps['dbsql'] }} ConfigMap
      # https://docs.ansible.com/ansible/latest/collections/kubernetes/core/k8s_module.html
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: "{{ keycloak_configmaps['dbsql'] }}"
            namespace: "{{ keycloak_namespace }}"
          data: "{{ {keycloak_sql_gz_b64: keycloak_sql.stdout} }}"
        validate:
          fail_on_error: false
        state: present
        apply: true

    - name: Create {{ keycloak_configmaps['admin'] }} ConfigMap
      vars:
        files:
          - files/keycloak/profile.sh
        data: |
          {% set data = {} %}
          {% for file in files %}
          {%   set name = file.split('/')[-1] %}
          {%   set _ = data.update({
                  name: lookup('ansible.builtin.file', file, rstrip=false)
               }) %}
          {% endfor %}
          {{ data }}
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: "{{ keycloak_configmaps['admin'] }}"
            namespace: "{{ keycloak_namespace }}"
          data: "{{ data }}"
        validate:
          fail_on_error: false
        state: present
        apply: true

    # https://github.com/codecentric/helm-charts/tree/master/charts/keycloakx
    - name: Install Keycloak.X Helm chart
      # https://docs.ansible.com/ansible/latest/collections/kubernetes/core/helm_module.html
      kubernetes.core.helm:
        kubeconfig: "{{ kubeconfig }}"
        chart_repo_url: https://codecentric.github.io/helm-charts
        chart_ref: keycloakx
        chart_version: "{{ keycloakx_chart_version }}"
        release_name: "{{ keycloakx_release_name }}"
        release_namespace: "{{ keycloak_namespace }}"
        release_values: "{{ keycloakx_chart_values }}"
        history_max: "{{ helm_max_history }}"
        atomic: true
        wait: true
        wait_timeout: 10m0s # requires wait=true
      # startup can take a while at max utilization of allocated CPU:
      # "updating configuration and installing your custom providers"
      timeout: 900

    # Helm chart does not currently allow
    # providing .serviceMonitor.tlsConfig
    - name: Patch Keycloak ServiceMonitor
      # https://docs.ansible.com/ansible/latest/collections/kubernetes/core/k8s_json_patch_module.html
      kubernetes.core.k8s_json_patch:
        kubeconfig: "{{ kubeconfig }}"
        api_version: monitoring.coreos.com/v1
        kind: ServiceMonitor
        name: "{{ keycloakx_release_name }}-keycloakx"
        namespace: "{{ keycloak_namespace }}"
        patch:
          - op: add
            path: /spec/endpoints/0/tlsConfig
            value: "{{ metric_scraper_tls_config }}"
      when: prometheus_crds_installed

    - name: Import Grafana dashboards
      vars:
        dashboards: "{{ keycloak_grafana_dashboards }}"
      ansible.builtin.include_tasks: tasks/grafana/dashboards.yml
      when: grafana_api_server_online | default(true)
  any_errors_fatal: true
