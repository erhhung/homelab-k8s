---
- name: Configure system settings
  tags: system
  hosts: k8s_all
  become: true
  vars_files:
    - vars/basics.yml
  pre_tasks:
    # https://serverfault.com/questions/959026/how-do-i-generate-and-set-the-locale-using-ansible
    - name: Get existing locale and language
      # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/command_module.html
      ansible.builtin.command: localectl status
      register: locale_status
      changed_when: false

    - name: Parse LANG from localectl output
      # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/set_fact_module.html
      ansible.builtin.set_fact:
        locale_lang: "{{ locale_status.stdout |
          regex_search('LANG=([^\n]+)','\\1') |
          first }}"

    - name: Parse LANGUAGE from localectl output
      ansible.builtin.set_fact:
        locale_language: "{{ locale_status.stdout |
          regex_search('LANGUAGE=([^\n]+)','\\1') |
          default([locale_lang], true) | first }}"
  tasks:
    - name: Set host name to "{{ inventory_hostname }}"
      # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/hostname_module.html
      # https://docs.ansible.com/ansible/latest/reference_appendices/special_variables.html
      ansible.builtin.hostname:
        name: "{{ inventory_hostname }}"

    - name: Set time zone to "{{ system_time_zone }}"
      # https://docs.ansible.com/ansible/latest/collections/community/general/timezone_module.html
      community.general.timezone:
        name: "{{ system_time_zone }}"

    - name: Generate locale "{{ system_locale }}"
      # https://docs.ansible.com/ansible/latest/collections/community/general/locale_gen_module.html
      # requires "locales" package
      community.general.locale_gen:
        name: "{{ system_locale }}"
        state: present

    - name: Set locale to "{{ system_locale }}"
        and language to "{{ system_language }}"
      ansible.builtin.command: >-
        localectl set-locale LANG={{ system_locale }}
                         LANGUAGE={{ system_language }}
      when: >-
        locale_lang     != system_locale or
        locale_language != system_language
      changed_when: true

    # https://errantminds.net/servers-it/optimising-xcp-ng-performance-on-older-servers-domu-clock-source
    - name: Change VM clock source to "tsc"
      # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/shell_module.html
      ansible.builtin.shell: |
        GRUB=/etc/default/grub
        PARAMS=(clocksource=tsc tsc=reliable)
        grep -q "$PARAMS" "$GRUB" && exit 9 # no change

        echo tsc > /sys/devices/system/clocksource/clocksource0/current_clocksource
        params=($(sed -En 's/^GRUB_CMDLINE_LINUX="([^"]+)"/\1/p' "$GRUB") ${PARAMS[@]})
        sed -Ei 's/^(GRUB_CMDLINE_LINUX=)".*"/\1"'"${params[*]}"'"/' "$GRUB" && update-grub
      args:
        executable: /bin/bash
      register: update_grub
      changed_when: update_grub.rc == 0
      failed_when: >-
        update_grub.rc != 0 and
        update_grub.rc != 9

    - name: Adjust Linux kernel parameters
      # https://docs.ansible.com/ansible/latest/collections/ansible/posix/sysctl_module.html
      ansible.posix.sysctl:
        name: "{{ item.key }}"
        value: "{{ item.value | string }}"
        sysctl_set: true
        state: present
        # reload sysctl.conf after all changes
        reload: "{{ i == sysctl | length - 1 }}"
      loop: "{{ sysctl }}"
      loop_control:
        label: "{{ item.key }}"
        index_var: i

    - name: Adjust system resource limits
      # https://docs.ansible.com/ansible/latest/collections/community/general/pam_limits_module.html
      community.general.pam_limits:
        domain: "{{ item.domain }}"
        limit_item: "{{ item.item }}"
        limit_type: "{{ item.type }}"
        value: "{{ item.value }}"
        # increase limits only
        use_max: true
      loop: "{{ pam_limits }}"
      loop_control:
        label: "{{ item.item }}"

    # only necessary if hosts are not rebooted after
    # drivers get installed by packages.yml playbook
    - name: Load installed kernel modules
      # https://docs.ansible.com/ansible/latest/collections/community/general/modprobe_module.html
      community.general.modprobe:
        name: "{{ item }}"
        state: present
      loop: "{{ modprobe }}"
  any_errors_fatal: true

- name: Configure network settings
  tags: network
  hosts: k8s_all
  gather_facts: false
  become: true
  vars_files:
    - vars/basics.yml
    - vars/kubernetes.yml
  vars:
    resolvectl_commands:
      - dns
      - domain
    cloud_init_netplan: /etc/netplan/50-cloud-init.yaml
  pre_tasks:
    - name: Get existing network settings
      ansible.builtin.command: resolvectl {{ item }} {{ host_pif }}
      loop: "{{ resolvectl_commands }}"
      register: resolvectl
      changed_when: false

    - name: Parse resolvectl output values
      vars:
        csv: "{{ (resolvectl.results[i].stdout |
          regex_search('.'~ host_pif ~'.: ([^\n]+)','\\1') or ['']) | first }}"
      ansible.builtin.set_fact:
        # generated facts: "resolvectl_dns" and "resolvectl_domain"
        "resolvectl_{{ item }}": "{{ csv | split if csv else [] }}"
      loop: "{{ resolvectl_commands }}"
      loop_control:
        index_var: i

    # - name: Print existing network settings
    #   # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/debug_module.html
    #   ansible.builtin.debug:
    #     msg: |-
    #       resolvectl_dns: "{{ resolvectl_dns | join(',') }}"
    #       resolvectl_domain: "{{ resolvectl_domain | join(',') }}"

    - name: Is {{ homelab_domain }} DNS working?
      vars:
        test_domain: pki.{{ homelab_domain }}.
        expected_ip: "{{ hostvars['pki'].ansible_host }}"
      ansible.builtin.shell: |
        set -o pipefail
        { dig +short {{ test_domain }} || true; } | grep -q {{ expected_ip }}
      register: is_dns_working
      changed_when: false
      failed_when: false

    - name: Cloud-init Netplan config enabled?
      # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/stat_module.html
      ansible.builtin.stat:
        path: "{{ item }}"
      loop:
        - "{{ cloud_init_netplan }}"
        - "{{ cloud_init_netplan }}.disabled"
      register: cloud_init_yaml
  tasks:
    - name: Comment out 127.0.1.1 /etc/hosts
      ansible.builtin.shell: |
        [ -f /etc/hosts.bak ] && exit 9

        # comment out 127.0.1.1 and add
        # empty line to end of the file
        cp -a /etc/hosts /etc/hosts.bak && \
          sed -Ei '/^127\.0\.1\.1\s/ {
            s/^/# /
            s/$/ # prefer non-loopback address/
          }; $!b; /^$/b; a\\
        ' /etc/hosts
      register: etc_hosts
      changed_when: etc_hosts.rc == 0
      failed_when: >-
        etc_hosts.rc != 0 and
        etc_hosts.rc != 9

    - name: Add static entries to /etc/hosts
      vars:
        k8s_hosts: |
          {% set hosts = groups['k8s_all'] %}
          {% if rke_ha_mode %}
          {%   set _ = hosts.append(rke_cluster_name) %}
          {% endif %}
          {{ hosts }}
        host_ip: "{{ hostvars[host].ansible_host }}"
        host_regex: ^{{ host_ip | regex_escape }}\s
        # if HA mode, the host "homelab" (cluster name) has its own virtual IP
        # if not HA mode, homelab is an alias for the first control plane node
        host_names: |
          {% set use_alias = not rke_ha_mode and host == rke_control_plane_host %}
          {{ [host, rke_cluster_name] if use_alias else [host] }}
        host_fqdns: "{{ host_names | product(search_domains) | map('join', '.')  | list }}"
        host_pairs: "{{ host_fqdns | map('regex_replace', '^([^.]+)', '\\1 \\1') | list }}"
        host_entry: "{{ ([host_ip] + (host_pairs | join(' ')) | split | unique) | join(' ') }}"

      # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/lineinfile_module.html
      ansible.builtin.lineinfile:
        dest: /etc/hosts
        regexp: "{{ host_regex }}"
        line: "{{ host_entry }}"
        state: present
      loop: "{{ k8s_hosts }}"
      loop_control:
        loop_var: host
        label: "{{ host_ip }}|{{ host }}"

    - name: Disable cloud-init Netplan config
      ansible.builtin.command:
        argv:
          - mv
          - "{{ cloud_init_netplan }}"
          - "{{ cloud_init_netplan }}.disabled"
      when: >-
        cloud_init_yaml.results[0].stat.exists and
        not cloud_init_yaml.results[1].stat.exists
      register: disabled_netplan
      changed_when: true

    - name: Create customized Netplan config
      # IMPORTANT: if cloud-init Netplan config is disabled, another config
      # must replace it or else no networking will be configured on reboot!
      # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/template_module.html
      ansible.builtin.template:
        src: "{{ template_dir }}/linux/netplan.yaml.j2"
        dest: /etc/netplan/50-ansible-init.yaml
        mode: "0600"
      when: >-
        resolvectl_dns    !=   name_servers or
        resolvectl_domain != search_domains or
        disabled_netplan  is changed
      notify: Apply updated Netplan config

    - name: Restart systemd-resolved service
      # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/systemd_service_module.html
      ansible.builtin.systemd_service:
        name: systemd-resolved
        state: restarted
      when: is_dns_working.rc != 0
  handlers:
    - name: Apply updated Netplan config
      ansible.builtin.command: netplan apply
      changed_when: true
  any_errors_fatal: true

- name: Customize login MOTD messages
  tags: motd
  hosts: k8s_all
  gather_facts: false
  become: true
  tasks:
    - name: Suppress select MOTD messages
      # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/file_module.html
      ansible.builtin.file:
        path: "{{ item }}"
        mode: "0644"
      loop:
        - /etc/update-motd.d/60-unminimize

    - name: Skip a line after all MOTDs
      # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/copy_module.html
      ansible.builtin.copy:
        content: |
          #!/bin/sh
          echo
        dest: /etc/update-motd.d/99-skip-line
        mode: "0755"
  any_errors_fatal: true

- name: Manage Linux users and groups
  tags: groups
  hosts: k8s_all
  gather_facts: false
  become: true
  vars_files:
    - vars/basics.yml
  tasks:
    - name: Add users to Linux groups
      # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/user_module.html
      ansible.builtin.user:
        name: "{{ item.user }}"
        groups: "{{ item.groups }}"
        append: true # IMPORTANT!
      loop: "{{ add_users_to_groups }}"
      loop_control:
        label: "{{ item.user ~'|'~ item.groups | join(',') }}"
      when: inventory_hostname in item.hosts

- name: Add CA certs to trust store
  tags: certs
  hosts:
    - k8s_all
    - cosmos
  gather_facts: false
  become: true
  pre_tasks:
    - name: Get CA certificates from PKI
      # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/include_tasks_module.html
      ansible.builtin.include_tasks: tasks/pki/cacerts.yml
      when: ca_certificates is not defined
  tasks:
    - name: Add certs to trust store
      ansible.builtin.copy:
        content: "{{ ca_certificates[i] ~'\n' }}"
        dest: /usr/local/share/ca-certificates/fourteeners_{{ item }}.crt
        mode: "0644"
      loop:
        - intermediate_ca
        - root_ca
      loop_control:
        index_var: i
      notify: Update CA trust store
  handlers:
    - name: Update CA trust store
      ansible.builtin.command: update-ca-certificates
      changed_when: true
  any_errors_fatal: true
