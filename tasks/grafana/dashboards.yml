# import one or more Grafana dashboards from
# https://grafana.com/grafana/dashboards/ by
# their IDs (gnetId)
#
# pass the following vars:
#   dashboards  <required> dashboard list
#     - title:  <required> official title
#       gnetId: <required> dashboard ID
#       filter: [optional] contain desc
#       dsVar:  [optional] default=DS_PROMETHEUS
#       tags:   [optional] list of tags
#
# TODO: detect revision change due to change in
# description filter and reimport the dashboard
---
- name: Gather facts about controller
  # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/include_tasks_module.html
  ansible.builtin.include_tasks: tasks/localfacts.yml
  when: local_python_interpreter is not defined

- name: Include vars/monitoring.yml
  # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/include_vars_module.html
  ansible.builtin.include_vars: vars/monitoring.yml
  when: grafana_url is not defined

- name: Import Grafana dashboards
  delegate_to: localhost
  become: false
  vars:
    ansible_python_interpreter: "{{ local_python_interpreter }}"
    api_base: "{{ grafana_url }}/api"
    admin_user: "{{ grafana_admin_user }}"
    admin_pass: "{{ grafana_admin_pass }}"
  block:
    - name: Find existing dashboards
      # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/uri_module.html
      ansible.builtin.uri:
        url: "{{ api_base }}/search?type=dash-db&limit=5000"
        url_username: "{{ admin_user }}"
        url_password: "{{ admin_pass }}"
        force_basic_auth: true
        return_content: true
      register: existing_dashboards
      retries: 5
      delay: 2

    # https://istio.io/latest/docs/ops/integrations/grafana/#option-2-import-from-grafanacom-into-an-existing-deployment
    - name: Import Grafana dashboard
      vars:
        api_auth: "{{ admin_user }}:'{{ admin_pass }}'"
        existing: "{{ existing_dashboards.json | map(attribute='title') }}"
      # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/shell_module.html
      ansible.builtin.shell: |
        set -eo pipefail

        revs_url="https://grafana.com/api/dashboards/{{ item.gnetId }}/revisions"
        retry_opts=(--retry 5 --retry-delay 2)

        # find latest revision that matches filter
        filter='{{ item.filter | default('') }}'
        [ "$filter" ] && \
            filter="| select(.description | contains(\"$filter\"))"

        rev=$(curl -sfL "$revs_url" | \
          jq -r  "[.items[] $filter | .revision] | max")
        desc="revision $rev of {{ item.title }} ({{ item.gnetId }})"

        echo "Downloading $desc..."
        echo "URL: $revs_url/$rev/download"
        json="$(curl -fsSL "${retry_opts[@]}" "$revs_url/$rev/download")"
        json="$(jq 'del(.id) | .title = "{{ item.title }}"' <<< "$json")"

        tags='{{ item.tags | default([]) | to_json }}'
        [ "$tags" == "[]" ] || \
          json="$(jq ".tags += $tags" <<< "$json")"

        file="/tmp/dashboard-{{ item.gnetId }}-$rev"
        echo "$revs_url/$rev/download" > "$file.url"
        echo "$json" > "$file.json"

        echo -e "Importing $desc...\n"
        curl -X POST -fku {{ api_auth }} \
          -H 'Content-Type: application/json' \
          --data-binary '{
            "dashboard": '"$json"',
            "overwrite": true,
            "inputs": [{
              "name":     "{{ item.dsVar | default('DS_PROMETHEUS') }}",
              "type":     "datasource",
              "pluginId": "prometheus",
              "value":    "Prometheus"
            }]
          }' \
          --no-progress-meter "${retry_opts[@]}" \
          {{ api_base }}/dashboards/import

        rm -f $file.*
      args:
        executable: /bin/bash
      loop: "{{ dashboards }}"
      loop_control:
        label: "{{ item.title }}"
      when: item.title not in existing
      register: import_dashboard
      changed_when: import_dashboard.rc == 0
      failed_when: >-
        import_dashboard.rc != 0 and
        import_dashboard.rc != 9 or
        import_dashboard.stdout is search('failed')
  any_errors_fatal: true
