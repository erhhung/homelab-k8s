# wait for all pods in a resource to be ready
#
# pass the following vars:
#   kubeconfig  <required> path to kubeconfig
#   api_version [optional] default based on resource kind
#   res_kind    <required> resource type (Pod, Deployment,
#                          StatefulSet, DaemonSet)
#   res_name    <required> resource name
#   res_ns      <required> resource namespace
#   max_wait    [optional] seconds to wait for pods
#                          to be ready (default=300)
---
- name: Wait until pod is running
  when: res_kind == 'Pod'
  vars: &vars
    api_default: "{{ 'v1' if res_kind == 'Pod' else 'apps/v1' }}"
    max_retries: "{{ max_wait | default(300) // retry_delay }}"
    retry_delay: 10
  # https://docs.ansible.com/ansible/latest/collections/kubernetes/core/k8s_info_module.html
  kubernetes.core.k8s_info: &k8s-info
    kubeconfig: "{{ kubeconfig }}"
    api_version: "{{ api_version | default(api_default) }}"
    kind: "{{ res_kind }}"
    name: "{{ res_name }}"
    namespace: "{{ res_ns }}"
  # https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_loops.html#retrying-a-task-until-a-condition-is-met
  register: pod_info
  until: >-
    pod_info.resources[0].status    is defined and
    pod_info.resources[0].status.phase == 'Running'
  retries: "{{ max_retries }}"
  delay: "{{ retry_delay }}"

- name: Wait until pods are ready
  when: res_kind != 'Pod'
  vars: *vars
  kubernetes.core.k8s_info: *k8s-info
  register: res_info
  until: >-
    res_info.resources[0].status             is defined and (
    res_info.resources[0].status.numberReady is defined and
    res_info.resources[0].status.numberReady ==
    res_info.resources[0].status.desiredNumberScheduled if
    res_kind == 'DaemonSet' else
    res_info.resources[0].status.readyReplicas is defined and
    res_info.resources[0].status.readyReplicas ==
    res_info.resources[0].status.replicas )
  retries: "{{ max_retries }}"
  delay: "{{ retry_delay }}"
