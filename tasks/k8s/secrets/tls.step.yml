# create cert-manager Certificate resource to create
# secret containing TLS certificate with auto-renewal
#
# pass the following vars:
#   kubeconfig  <required> path to kubeconfig
#   secret_name <required> name      of Secret
#   secret_ns   <required> namespace of Secret
#   create_ns   [optional] default=true
#   release     [optional] release name: add Helm
#                          labels and annotations
#   cert_name   <required> name of Certificate
#   algorithm   [optional] default=ECDSA
#   encoding    [optional] default=PKCS8
#   key_size    [optional] default:RSA=2048
#                          default:ECDSA=256
#   der_key     [optional] add "key.der"
#                          default=false
#   days        [optional] default=30
#   sans        <required> list of SANs
#                          (CN=sans[0])
#   wait        [optional] default=true
---
- name: Include vars/certmanager.yml
  # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/include_vars_module.html
  ansible.builtin.include_vars: vars/certmanager.yml
  when: step_issuer_release_name is not defined

- name: Create {{ cert_name }} Certificate
  become: false
  vars:
    # required kubernetes>=24.2 package only in user virtualenv
    ansible_python_interpreter: "{{ venv_python_interpreter }}"
  block:
    - name: Create {{ secret_ns }} Namespace
      # https://docs.ansible.com/ansible/latest/collections/kubernetes/core/k8s_module.html
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        api_version: v1
        kind: Namespace
        name: "{{ secret_ns }}"
        state: present
      when: create_ns | default(true)

    - name: Create {{ cert_name }} Certificate
      vars:
        cn: "{{ sans | first }}"
        ips: "{{ sans | select('search', '^[0-9]+\\.') }}"
        emails: "{{ sans | select('search', '@') }}"
        dns: |
          {% set dns = [] %}
          {% for san in sans %}
          {%   if san not in ips and san not in emails
                                 and san is search('\\.') %}
          {%     set _ = dns.append(san) %}
          {%   endif %}
          {% endfor %}
          {% if dns | length > 0 and cn != dns[0] %}
          {%   set _ = dns.insert(0, cn) %}
          {% endif %}
          {{ dns   }}
        usages: |
          {% set usages = ['digital signature'] %}
          {% if dns is truthy or ips is truthy  %}
          {%   set _ = usages.append('key encipherment') %}
          {%   set _ = usages.append('server auth')      %}
          {% endif %}
          {% if emails is truthy %}
          {%   set _ = usages.append('client auth') %}
          {% endif  %}
          {{ usages }}
        # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/template_lookup.html
        definition: "{{ lookup('ansible.builtin.template',
          template_dir ~ '/certmanager/cert.step.yaml.j2') }}"
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        namespace: "{{ secret_ns }}"
        definition: "{{ definition }}"
        state: present
        apply: true
        wait: true

    - name: Wait for {{ secret_name }} Secret
      # https://docs.ansible.com/ansible/latest/collections/kubernetes/core/k8s_info_module.html
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig }}"
        api_version: v1
        kind: Secret
        name: "{{ secret_name }}"
        namespace: "{{ secret_ns }}"
      when: wait | default(true)
      # https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_loops.html#retrying-a-task-until-a-condition-is-met
      register: k8s_info
      until: k8s_info.resources is truthy
      retries: 10
      delay: 3
  any_errors_fatal: true
