# create Kubernetes secret
#
# pass the following vars:
#   kubeconfig  <required> path to kubeconfig
#   secret_type [optional] default=generic/tls
#   secret_name <required> name      of Secret
#   secret_ns   <required> namespace of Secret
#   create_ns   [optional] default=true
#   release     [optional] release name: add Helm
#                          labels and annotations
#   secret_data <required> key:value dictionary
#                          (not base64-encoded)
#   if_changed  [optional] notify handler
---
- name: Create {{ secret_name }} Secret
  become: false
  vars:
    # required kubernetes>=24.2 package only in user virtualenv
    ansible_python_interpreter: "{{ venv_python_interpreter }}"
  block:
    - name: Create {{ secret_ns }} Namespace
      # https://docs.ansible.com/ansible/latest/collections/kubernetes/core/k8s_module.html
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        api_version: v1
        kind: Namespace
        name: "{{ secret_ns }}"
        state: present
      when: create_ns | default(true)

    - name: Create {{ secret_name }} Secret
      vars:
        # _secret_type is set by tasks/k8s/secrets/tls*.yml to avoid
        #  recursively redefining secret_type with a different value
        type: "{{ _secret_type | default(secret_type | default('generic')) }}"
        _type: >-
          {{ 'Opaque' if (type | lower) is search('generic|opaque')
              else 'kubernetes.io/tls' if (type | lower) == 'tls'
              else type }}
        # unfortunately, adding Helm labels and annotations won't
        # magically bring external objects into a Helm release so
        # they get deleted at the same time :(
        helm: |
          {% set helm = {} %}
          {% if release is defined %}
          {%   set _ = helm.update({
                 'labels': {
                   'app.kubernetes.io/managed-by': 'Helm',
                   'app.kubernetes.io/instance':   release,
                 },
                 'annotations': {
                   'meta.helm.sh/release-name':      release,
                   'meta.helm.sh/release-namespace': secret_ns,
                 },
               })  %}
          {% endif %}
          {{ helm  }}
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: "{{ secret_name }}"
            namespace: "{{ secret_ns }}"
            labels: "{{      helm['labels']      | default(omit) }}"
            annotations: "{{ helm['annotations'] | default(omit) }}"
          type: "{{ _type }}"
          data: |
            {% set data = {} %}
            {% for key, value in secret_data.items() %}
            {%   set _ = data.update({key: value | b64encode}) %}
            {% endfor %}
            {{ data }}
        validate:
          fail_on_error: false
        state: present
        apply: true
      when: secret_data is defined
      notify: "{{ if_changed | default(omit) }}"
  any_errors_fatal: true
