# https://goharbor.io/
# https://goharbor.io/docs/latest/install-config/harbor-ha-helm/
---
- name: Install Harbor on K3s cluster
  tags: install
  hosts: "{{ k3s_control_plane_host }}"
  gather_facts: false
  vars_files: &vars_files
    - vars/kubernetes.yml
    - vars/storage.yml
    - vars/harbor.yml
  vars:
    kubeconfig: "{{ k3s_kubeconfig }}"
    repo_name: harbor
    repo_url: https://helm.goharbor.io
    chart_name: harbor
    chart_ver: "{{ harbor_chart_version }}"
    release: "{{ harbor_release_name }}"
    release_ns: "{{ harbor_namespace }}"
  pre_tasks:
    # despite providing fixed values for various secrets and certs
    # to the Harbor Helm chart, the "helm upgrade" command through
    # kubernetes.core.helm will always create a new revision, even
    # when "helm diff upgrade" command outputs nothing, so perform
    # the check first, and only proceed with the upgrade if needed
    - name: Check if Helm upgrade needed
      vars:
        values_json: "{{ harbor_chart_values | to_json }}"
      # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/include_tasks_module.html
      ansible.builtin.include_tasks: tasks/helm/diff.yml
      # sets needs_upgrade fact
  tasks:
    - name: Create Harbor ingress secret
      vars:
        secret_name: "{{ harbor_secrets['ingress'] }}"
        secret_ns: "{{ release_ns }}"
        cert_name: harbor-ingress
        sans: "{{ [harbor_fqdn] }}"
      ansible.builtin.include_tasks: tasks/k8s/secrets/tls.step.yml

    # https://github.com/goharbor/harbor-helm/tree/main
    - name: Install Harbor Helm chart
      vars:
        # required kubernetes>=24.2 package only in user virtualenv
        ansible_python_interpreter: "{{ venv_python_interpreter }}"
      # https://docs.ansible.com/ansible/latest/collections/kubernetes/core/helm_module.html
      kubernetes.core.helm:
        kubeconfig: "{{ kubeconfig }}"
        chart_repo_url: "{{ repo_url }}"
        chart_ref: "{{ chart_name }}"
        chart_version: "{{ chart_ver }}"
        release_name: "{{ release }}"
        release_namespace: "{{ release_ns }}"
        release_values: "{{ harbor_chart_values }}"
        history_max: "{{ helm_max_history }}"
        atomic: true
        wait: true
      timeout: 300
      when: needs_upgrade
  any_errors_fatal: true

# https://github.com/goharbor/harbor-cli#installation
- name: Install Harbor CLI utility
  tags: cli
  hosts: k8s_all
  gather_facts: false
  vars_files:
    - vars/harbor.yml
  tasks:
    - name: Install Harbor CLI utility
      become: true
      # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/shell_module.html
      ansible.builtin.shell: |
        cd /usr/local/bin
        set -o pipefail

        REL="https://github.com/goharbor/harbor-cli/releases/latest"
        VER=$(curl -Is $REL | sed -En 's/^location:.+\/tag\/(.+)\r$/\1/p')

        # check if latest version already installed
        command -v harbor &> /dev/null && {
          ver=$(harbor version | yq .Version)
          [ "$ver" == "$VER" ] && exit 9 # no change
        }
        ARCH=$(uname -m | sed -e 's/aarch64/arm64/' \
                              -e  's/x86_64/amd64/')
        curl -fsSL "$REL/download/harbor-cli_${VER#v}_linux_$ARCH.tar.gz" | \
          tar -xz --no-same-owner harbor-cli
        mv -f harbor-cli harbor
      args:
        executable: /bin/bash
      register: install_cli
      changed_when: install_cli.rc == 0
      failed_when: >-
        install_cli.rc != 0 and
        install_cli.rc != 9

    # https://github.com/goharbor/harbor-cli/tree/main/doc/cli-config/_index.md
    # https://github.com/goharbor/harbor-cli/tree/main/doc/cli-encryption/_index.md
    - name: Configure Harbor CLI login
      ansible.builtin.shell: |
        # restart Bash and load .bash_aliases and .bash_secrets
        exec /bin/bash -l <<'EOT'
        . .bash_aliases
        set -o pipefail

        harbor context list -o yaml | \
          grep -q admin && exit 9 # no change

        [ "$HARBOR_ENCRYPTION_KEY" ] || {
          export HARBOR_ENCRYPTION_KEY=$(openssl rand -base64 32)
          cat <<EOF >> .bash_secrets
        export HARBOR_ENCRYPTION_KEY="$HARBOR_ENCRYPTION_KEY"
        EOF
        }
        harbor login https://{{ harbor_fqdn }} \
          -u admin -p '{{ harbor_admin_pass }}'
        EOT
      register: config_cli
      changed_when: config_cli.rc == 0
      failed_when: >-
        config_cli.rc != 0 and
        config_cli.rc != 9
  any_errors_fatal: true

- name: Configure Harbor registry
  tags: configure
  hosts: "{{ k3s_control_plane_host }}"
  gather_facts: false
  vars_files: *vars_files
  vars:
    # https://harbor.fourteeners.local/devcenter-api-2.0
    api_base: https://{{ harbor_fqdn }}/api/v2.0
    api_auth: admin:'{{ harbor_admin_pass }}'
  pre_tasks:
    - name: Get library project config
      # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/uri_module.html
      ansible.builtin.uri:
        url: "{{ api_base }}/projects/library"
        # GET does not require authentication
        return_content: true
      register: project_config
  tasks:
    - name: Configure library project
      vars:
        metadata: "{{ project_config.json.metadata }}"
        auto_sbom: "{{ metadata.auto_sbom_generation | default('false') | bool }}"
        auto_scan: "{{ metadata.auto_scan            | default('false') | bool }}"
      ansible.builtin.uri:
        method: PUT
        url: "{{ api_base }}/projects/library"
        url_username: admin
        url_password: "{{ harbor_admin_pass }}"
        force_basic_auth: true
        body_format: json
        body:
          metadata:
            # all values must be strings
            auto_sbom_generation: "true"
            auto_scan: "true"
      when: >-
        not auto_sbom or
        not auto_scan
      changed_when: true

    # could also be done using the CLI
    - name: Add non-admin Harbor users
      ansible.builtin.shell: |
        set -o pipefail

        get_user_id() {
          local api_url="{{ api_base }}/users/search?username=$1"
          curl -sku {{ api_auth }} "$api_url" | jq -r .[].user_id
        }
        user_id="$(get_user_id {{ item.username }})"
        [ "$user_id" ] && exit 9 # no change

        params=(
          username="{{ item.username }}"
          realname="{{ item.realname }}"
             email="{{ item.email    }}"
          password="{{ item.password | quote }}"
           comment="{{ item.comment  | quote if item.comment is defined else '' }}"
        )
        curl -X POST -sku {{ api_auth }} \
             -H 'Content-Type: application/json' \
             -d "$(jo "${params[@]}")" {{ api_base }}/users
        user_id="$(get_user_id {{ item.username }})"
        [ "$user_id" ] || exit 1

        # add user to default library project
        role_id={{ harbor_roles[item.role] }}
        params=(
          member_user=$(jo user_id=$user_id)
          role_id=$role_id
        )
        curl -X POST -sku {{ api_auth }} \
             -H 'Content-Type: application/json' \
             -d "$(jo "${params[@]}")" {{ api_base }}/projects/library/members
      args:
        executable: /bin/bash
      loop: "{{ harbor_users }}"
      loop_control:
        label: "{{ item.username }}"
      register: create_users
      changed_when: create_users.rc == 0
      failed_when: >-
        create_users.rc != 0 and
        create_users.rc != 9 or
        create_users.stdout is search('errors')
  any_errors_fatal: true
