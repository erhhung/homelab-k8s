# https://docs.opensearch.org/docs/latest/opensearch/
# https://docs.opensearch.org/docs/latest/dashboards/
---
# https://docs.opensearch.org/docs/latest/install-and-configure/install-opensearch/helm/
- name: Install OpenSearch on RKE cluster
  tags: opensearch
  hosts: "{{ rke_control_plane_host }}"
  gather_facts: false
  vars_files: &vars_files
    - vars/kubernetes.yml
    - vars/storage.yml
    - vars/monitoring.yml
    - vars/opensearch.yml
    - vars/kibana.yml
  vars:
    # required kubernetes>=24.2 package only in user virtualenv
    ansible_python_interpreter: "{{ venv_python_interpreter }}"
    kubeconfig: "{{ rke_kubeconfig }}"
    secret_ns: "{{ opensearch_namespace }}"
    create_ns: false
    release: "{{ opensearch_release_name }}"
  pre_tasks:
    - name: Hash OpenSearch user passwords
      vars:
        passwords: "{{ opensearch_passwords }}"
        fact_name: opensearch_passwords_hashed
      # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/include_tasks_module.html
      ansible.builtin.include_tasks: tasks/hashpwds.yml

    - name: Is the monitoring stack ready?
      ansible.builtin.include_tasks: tasks/monitoring/stackready.yml
      when: monitoring_stack_ready is not defined

    - name: Is OpenSearch already running?
      # https://docs.ansible.com/ansible/latest/collections/kubernetes/core/k8s_info_module.html
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig }}"
        api_version: apps/v1
        kind: StatefulSet
        name: "{{ opensearch_master_service }}"
        namespace: "{{ opensearch_namespace }}"
      register: opensearch_info
  tasks:
    # cert also used by OpenSearch ingress
    - name: Create OpenSearch node secret
      vars:
        # Java requires key file to
        # be in PKCS#8 / PEM format
        secret_name: "{{ opensearch_secrets['node-tls'] }}"
        create_ns: true
        cert_name: opensearch-node
        algorithm: RSA
        # IMPORTANT! first SAN will be CN, and must match
        # value of `opensearch_security_plugin.nodes_dn`
        sans_:
          - opensearch-node
          - "{{ opensearch_fqdns }}"
          - "*.{{ opensearch_namespace }}.svc.{{ cluster_domain }}"
          - "*.{{ opensearch_namespace }}.svc"
        sans: "{{ sans_ | flatten }}"
      ansible.builtin.include_tasks: tasks/k8s/secrets/tls.step.yml

    - name: Create OpenSearch admin secret
      vars:
        # Java requires key file to
        # be in PKCS#8 / PEM format
        secret_name: "{{ opensearch_secrets['admin-tls'] }}"
        cert_name: opensearch-admin
        algorithm: RSA
        days: 365
        sans:
          - erhhung
          - "{{ user_erhhung.email }}"
      ansible.builtin.include_tasks: tasks/k8s/secrets/tls.step.yml

    - name: Create OpenSearch passwords secret
      vars:
        secret_name: "{{ opensearch_secrets['passwords'] }}"
        secret_data:
          admin: "{{ opensearch_admin_pass }}"
          kibana: "{{ kibana_os_pass }}"
      ansible.builtin.include_tasks: tasks/k8s/secrets/generic.yml

    - name: Create OpenSearch credentials secret
      vars:
        users:
          - metrics
        secret_name: opensearch-creds-{{ item }}
        secret_data:
          username: "{{ item }}"
          password: "{{ opensearch_passwords[item] }}"
      ansible.builtin.include_tasks: tasks/k8s/secrets/generic.yml
      loop: "{{ users }}"

    - name: Create OpenSearch security secret
      vars:
        secret_name: "{{ opensearch_secrets['security'] }}"
        secret_data: "{{ opensearch_security_config }}"
        if_changed: Apply (updated) security config
      ansible.builtin.include_tasks: tasks/k8s/secrets/generic.yml

    - name: Create monitoring scraper secret
      ansible.builtin.include_tasks: tasks/monitoring/scraper.yml

    # https://github.com/opensearch-project/helm-charts/tree/main/charts/opensearch
    - name: Install OpenSearch Helm chart
      # https://docs.ansible.com/ansible/latest/collections/kubernetes/core/helm_module.html
      kubernetes.core.helm:
        kubeconfig: "{{ kubeconfig }}"
        chart_repo_url: https://opensearch-project.github.io/helm-charts
        chart_ref: opensearch
        chart_version: "{{ opensearch_chart_version }}"
        release_name: "{{ opensearch_release_name }}"
        release_namespace: "{{ opensearch_namespace }}"
        release_values: "{{ opensearch_chart_values }}"
        history_max: "{{ helm_max_history }}"
        atomic: true
        wait: true
        wait_timeout: 10m0s # requires wait=true
      # it can take a long time to pull container images
      # and provision storage and start each StatefulSet
      # pod sequentially due to the OrderedReady policy
      timeout: 1800

    # https://github.com/opensearch-project/helm-charts/issues/673
    # https://github.com/opensearch-project/helm-charts/pull/674
    - name: Patch OpenSearch ServiceMonitor
      # https://docs.ansible.com/ansible/latest/collections/kubernetes/core/k8s_module.html
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        api_version: monitoring.coreos.com/v1
        kind: ServiceMonitor
        name: "{{ opensearch_master_service }}-service-monitor"
        namespace: "{{ opensearch_namespace }}"
        definition:
          spec:
            selector:
              matchLabels:
                prometheus.io/scrape: "true"
        state: patched
      when: prometheus_crds_installed | default(false)

    - name: Initialize OpenSearch Security?
      # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/uri_module.html
      ansible.builtin.uri:
        url: "{{ opensearch_url }}"
        # status would be 503 (Service Unavailable) with
        # response "OpenSearch Security not initialized";
        # otherwise, 401 (Unauthorized) would be expected
        status_code: [401, 503]
        return_content: true
      register: init_check
      changed_when: >-
        init_check.status  == 503 and
        init_check.content is search('OpenSearch Security not initialized')
      notify: Apply (updated) security config
  handlers:
    - name: Apply (updated) security config
      # a handler cannot have block of subtasks, so the
      # tasks have been refactored into a separate file
      ansible.builtin.include_tasks: tasks/opensearch/security.yml
  any_errors_fatal: true

# https://docs.opensearch.org/docs/latest/install-and-configure/install-dashboards/helm/
- name: Install OpenSearch Dashboards
  tags: kibana
  hosts: "{{ rke_control_plane_host }}"
  gather_facts: false
  vars_files: *vars_files
  vars:
    kubeconfig: "{{ rke_kubeconfig }}"
  tasks:
    - name: Create Dashboards ingress secret
      vars:
        secret_name: "{{ kibana_secrets['ingress'] }}"
        secret_ns: "{{ kibana_namespace }}"
        create_ns: false
        release: "{{ dashboards_release_name }}"
        cert_name: dashboards-ingress
        sans: "{{ [kibana_fqdn] }}"
      ansible.builtin.include_tasks: tasks/k8s/secrets/tls.step.yml

    # https://github.com/opensearch-project/helm-charts/tree/main/charts/opensearch-dashboards
    - name: Install Dashboards Helm chart
      vars:
        # required kubernetes>=24.2 package only in user virtualenv
        ansible_python_interpreter: "{{ venv_python_interpreter }}"
      kubernetes.core.helm:
        kubeconfig: "{{ kubeconfig }}"
        chart_repo_url: https://opensearch-project.github.io/helm-charts
        chart_ref: opensearch-dashboards
        chart_version: "{{ dashboards_chart_version }}"
        release_name: "{{ dashboards_release_name }}"
        release_namespace: "{{ kibana_namespace }}"
        release_values: "{{ dashboards_chart_values }}"
        history_max: "{{ helm_max_history }}"
        atomic: true
        wait: false
      timeout: 300

    - name: Add Wave annotations to Deployment
      vars:
        res_kind: Deployment
        res_name: "{{ dashboards_release_name }}"
        res_ns: "{{ kibana_namespace }}"
        wait_secs: 3
      ansible.builtin.include_tasks: tasks/k8s/wave.yml

    - name: Wait until Dashboards is ready
      ansible.builtin.uri:
        url: https://{{ kibana_fqdn }}/
      # https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_loops.html#retrying-a-task-until-a-condition-is-met
      register: site_check
      until: site_check.status == 200
      retries: 30
      delay: 3

    - name: Customize Dashboards settings
      vars:
        username: admin
        password: "{{ opensearch_admin_pass }}"
        settings: "{{ kibana_admin_settings }}"
      ansible.builtin.include_tasks: tasks/kibana/settings.yml

    - name: Import Grafana dashboards
      vars:
        dashboards: "{{ opensearch_grafana_dashboards }}"
      ansible.builtin.include_tasks: tasks/grafana/dashboards.yml
      when: grafana_api_server_online | default(true)
  any_errors_fatal: true
