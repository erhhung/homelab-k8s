# https://prometheus-operator.dev/
# https://github.com/prometheus-operator/kube-prometheus
# https://runbooks.prometheus-operator.dev/runbooks
---
- name: Install Prometheus monitoring stack
  tags: install
  hosts: "{{ rke_control_plane_host }}"
  gather_facts: false
  vars_files:
    - vars/kubernetes.yml
    - vars/storage.yml
    - vars/minio.yml
    - vars/valkey.yml
    - vars/monitoring.yml
  vars:
    # required kubernetes>=24.2 package only in user virtualenv
    ansible_python_interpreter: "{{ venv_python_interpreter }}"
    kubeconfig: "{{ rke_kubeconfig }}"
    secret_ns: "{{ monitoring_namespace }}"
    create_ns: false
    release: "{{ monitoring_release_name }}"
  pre_tasks:
    - name: Hash monitoring user passwords
      vars:
        passwords: "{{ monitoring_passwords }}"
        fact_name: monitoring_passwords_hashed
      # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/include_tasks_module.html
      ansible.builtin.include_tasks: tasks/hashpwds.yml

    # CA certs to be stored inline with Grafana data
    # source configs for Prometheus and Alertmanager
    - name: Get CA certificates from PKI
      ansible.builtin.include_tasks: tasks/pki/cacerts.yml
      when: ca_certificates is not defined

    # determine whether to create the node exporter
    # RBAC config before installing the Helm chart
    - name: Is Helm chart already installed?
      # https://docs.ansible.com/ansible/latest/collections/kubernetes/core/helm_info_module.html
      kubernetes.core.helm_info:
        kubeconfig: "{{ kubeconfig }}"
        release_name: "{{ monitoring_release_name }}"
        release_namespace: "{{ monitoring_namespace }}"
        release_state: ["deployed"]
      register: helm_info

    # add CORS headers to Grafana responses
    - name: Set grafana_ingress_snippet fact
      vars:
        location_regex: ^/api
        backend_url: https://{{ monitoring_release_name }}-grafana.{{
          monitoring_namespace }}.svc.{{ cluster_domain }}
      # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/set_fact_module.html
      ansible.builtin.set_fact:
        # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/template_lookup.html
        grafana_ingress_snippet: |-
          {{ lookup('ansible.builtin.template', template_dir ~ '/cors.nginx.j2') }}
  tasks:
    # client certs for etcd ServiceMonitor
    # (turns out not needed as the metrics
    # endpoint is only available via HTTP)
    - name: Create RKE etcd client secret
      vars:
        cert_desc: RKE etcd client
        cert_file: etcd/client
        secret_name: "{{ monitoring_secrets['etcd'] }}"
        create_ns: true
      ansible.builtin.include_tasks: tasks/k8s/secrets/tls.rke.yml

    - name: Create monitoring ingress secret
      vars:
        sans_:
          - "*.{{ monitoring_namespace }}.svc.{{ cluster_domain }}"
          - "*.{{ monitoring_namespace }}.svc"
        secret_name: "{{ monitoring_secrets[item.name] }}"
        cert_name: "{{ item.cert }}-ingress"
        sans: "{{ item.sans | flatten }}"
      ansible.builtin.include_tasks: tasks/k8s/secrets/tls.step.yml
      loop:
        - name: prometheus
          cert: monitoring-prometheus
          sans:
            - prometheus
            - "{{ monitoring_fqdns['prometheus'] }}"
            - "{{ sans_ }}"
            - 127.0.0.1
        - name: thanos-tls
          cert: thanos-sidecar
          sans:
            - thanos
            - "{{ monitoring_fqdns['thanos'] | first }}"
            - "{{ sans_ }}"
        - name: alertmanager
          cert: monitoring-alertmanager
          sans:
            - alertmanager
            - "{{ monitoring_fqdns['alertmanager'] }}"
            - "{{ sans_ }}"
            - 127.0.0.1
        - name: grafana
          cert: monitoring-grafana
          sans:
            - "{{ monitoring_fqdns['grafana'] }}"
            - "{{ sans_ }}"
            - localhost
      loop_control:
        label: "{{ item.name }}"

    - name: Create monitoring scraper secret
      ansible.builtin.include_tasks: tasks/monitoring/scraper.yml

    - name: Create Thanos HTTP config secret
      vars:
        secret_name: "{{ monitoring_secrets['thanos-config'] }}"
        secret_data: "{{ thanos_config_secret_data }}"
      ansible.builtin.include_tasks: tasks/k8s/secrets/generic.yml

    # secret containing oauth2-proxy config files
    - name: Create monitoring oauth-proxy secret
      vars:
        secret_name: "{{ monitoring_secrets['oauth-proxy'] }}"
        secret_data: "{{ monitoring_oauth2_proxy_config }}"
      ansible.builtin.include_tasks: tasks/k8s/secrets/generic.yml

    - name: Create monitoring credentials secret
      vars:
        passwords: "{{ monitoring_passwords }}"
        thanos: "{{ thanos_metrics_auth }}"
        grafana: "{{ prometheus_stack_chart_values.grafana }}"
        secret_name: "{{ monitoring_secrets['credentials'] }}"
        secret_data: |
          {{ {
             thanos.username.key:                 'metrics',
             thanos.password.key:       passwords['metrics'],
             grafana.admin.userKey:     grafana_admin_user,
             grafana.admin.passwordKey: grafana_admin_pass,
          } }}
      ansible.builtin.include_tasks: tasks/k8s/secrets/generic.yml

    # this step is necessary before the Helm release has ever been
    # installed because the Helm-generated template will have both
    # the original prometheus-node-exporter-rbac-config ConfigMap
    # as well as the modified version from extraManifests section
    # of the chart values, which causes duplicate resource error
    # unless an existing "Helm-managed" resource can be imported
    - name: Create node exporter RBAC config
      vars:
        manifest: "{{ prometheus_stack_chart_values.extraManifests[0] }}"
      # https://docs.ansible.com/ansible/latest/collections/kubernetes/core/k8s_module.html
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: "{{ manifest.metadata.name }}"
            namespace: "{{ monitoring_namespace }}"
            labels:
              app.kubernetes.io/managed-by: Helm
            annotations:
              meta.helm.sh/release-name: "{{ monitoring_release_name }}"
              meta.helm.sh/release-namespace: "{{ monitoring_namespace }}"
          data: "{{ manifest.data }}"
        validate:
          fail_on_error: false
        state: present
        apply: true
      when: helm_info.status is not defined

    - name: Load custom scrape configurations
      vars:
        # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/fileglob_lookup.html
        # https://docs.ansible.com/ansible/latest/plugins/lookup.html#forcing-lookups-to-return-lists-query-and-wantlist-true
        configs: "{{ query('ansible.builtin.fileglob', 'tasks/monitoring/configs/*.yml') }}"
      # each tasks file should set fact referenced by
      # additional_scrape_configs in the chart values
      ansible.builtin.include_tasks: "{{ item }}"
      loop: "{{ configs }}"
      loop_control:
        # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/basename_filter.html
        label: "{{ item | ansible.builtin.basename }}"

    # https://github.com/prometheus-community/helm-charts/tree/main/charts/kube-prometheus-stack
    - name: Install Prometheus stack Helm chart
      # https://docs.ansible.com/ansible/latest/collections/kubernetes/core/helm_module.html
      kubernetes.core.helm:
        kubeconfig: "{{ kubeconfig }}"
        chart_repo_url: https://prometheus-community.github.io/helm-charts
        chart_ref: kube-prometheus-stack
        chart_version: "{{ prometheus_stack_chart_version }}"
        release_name: "{{ monitoring_release_name }}"
        release_namespace: "{{ monitoring_namespace }}"
        release_values: "{{ prometheus_stack_chart_values }}"
        history_max: "{{ helm_max_history }}"
        atomic: true
        wait: true
      timeout: 600

    # oauth2-proxy doesn't currently support auto-reloading
    # TLS certs, so make Wave watch TLS Secrets and trigger
    # rolling pod restarts whenever mounted Secrets change
    - name: Add Wave annotations to StatefulSet
      vars:
        res_kind: StatefulSet
        res_name: "{{ item ~'-'~ monitoring_release_name ~'-'~ item }}"
        res_ns: "{{ monitoring_namespace }}"
      ansible.builtin.include_tasks: tasks/k8s/wave.yml
      loop:
        - prometheus
        - alertmanager

    # Helm chart doesn't currently allow specifying
    # basicAuth in .prometheus.thanosServiceMonitor
    - name: Patch Thanos sidecar ServiceMonitor
      # https://docs.ansible.com/ansible/latest/collections/kubernetes/core/k8s_json_patch_module.html
      kubernetes.core.k8s_json_patch:
        kubeconfig: "{{ kubeconfig }}"
        api_version: monitoring.coreos.com/v1
        kind: ServiceMonitor
        name: "{{ monitoring_release_name }}-thanos-sidecar"
        namespace: "{{ monitoring_namespace }}"
        patch:
          - op: add
            path: /spec/endpoints/0/basicAuth
            value: "{{ thanos_metrics_auth }}"
  any_errors_fatal: true

- name: Configure monitoring applications
  tags: configure
  hosts: localhost
  gather_facts: false
  vars_files:
    - vars/monitoring.yml
  tasks:
    - name: Customize Grafana user settings
      vars:
        username: "{{ grafana_admin_user }}"
        password: "{{ grafana_admin_pass }}"
        settings: "{{ grafana_admin_settings }}"
      ansible.builtin.include_tasks: tasks/grafana/settings.yml
  any_errors_fatal: true
