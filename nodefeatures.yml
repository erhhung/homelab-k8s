# https://jonathangazeley.com/2025/02/11/intel-gpu-acceleration-on-kubernetes
# https://kubernetes.io/docs/tasks/manage-gpus/scheduling-gpus/
#
# GPU detection on our nodes requires the following steps:
# 1. install linux-modules-extra-<kernel> package on nodes: Intel i915 driver
# 2. enable GPU passthrough on XCP-ng hosts: xen-pciback.hide=(0000:00:02.0)
# 3. assign PCI passthrough to select nodes: other-config:pci=0/0000:00:02.0
#    (steps 2 and 3 are performed by the "homelab-xcp" Ansible project)
---
# https://kubernetes-sigs.github.io/node-feature-discovery
# https://kubernetes-sigs.github.io/node-feature-discovery/stable/deployment/helm.html
- name: Install Node Feature Discovery
  tags: nfd
  hosts: &hosts
    - "{{ k3s_control_plane_host }}"
    - "{{ rke_control_plane_host }}"
  gather_facts: false
  vars_files: &vars_files
    - vars/kubernetes.yml
    - vars/monitoring.yml
    - vars/nodefeatures.yml
  vars: &vars # required kubernetes>=24.2 package only in user virtualenv
    ansible_python_interpreter: "{{ venv_python_interpreter }}"
    # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/ternary_filter.html
    cluster: "{{ (inventory_hostname == k3s_control_plane_host) | ternary('k3s','rke') }}"
    kubeconfig: "{{ vars[cluster ~'_kubeconfig'] }}"
  pre_tasks:
    - name: Is the monitoring stack ready?
      # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/include_tasks_module.html
      ansible.builtin.include_tasks: tasks/monitoring/stackready.yml
      when: monitoring_stack_ready is not defined
  tasks:
    - name: Install Node Feature Discovery Helm chart
      # https://docs.ansible.com/ansible/latest/collections/kubernetes/core/helm_module.html
      kubernetes.core.helm:
        kubeconfig: "{{ kubeconfig }}"
        chart_repo_url: https://kubernetes-sigs.github.io/node-feature-discovery/charts
        chart_ref: node-feature-discovery
        chart_version: "{{ nfd_chart_version }}"
        release_name: "{{ nfd_release_name }}"
        release_values: "{{ nfd_chart_values }}"
        release_namespace: "{{ nfd_namespace }}"
        create_namespace: true
        atomic: true
        wait: true

    # this step is what would add vendor-specific lables,
    # like "intel.feature.node.kubernetes.io/gpu=true" or
    # "feature.node.kubernetes.io/pci-10de.present=true"
    - name: Deploy additional node feature rules
      vars:
        rules: |
          {% set rules = [] %}
          {% for rule in additional_node_feature_rules %}
          {%   if rule.url is defined %}
          {#     https://docs.ansible.com/ansible/latest/collections/ansible/builtin/url_lookup.html #}
          {%     set def = lookup('ansible.builtin.url', rule.url, split_lines=false) | from_yaml %}
          {%     set   _ = rules.append({
                   'name': rule.name,
                   'def':  def,
                 }) %}
          {%   else %}
          {%     set _ = rules.append(rule) %}
          {%   endif %}
          {% endfor  %}
          {{ rules   }}
      # https://docs.ansible.com/ansible/latest/collections/kubernetes/core/k8s_module.html
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig   }}"
        definition: "{{ item.def     }}"
        namespace: "{{ nfd_namespace }}"
        state: present
        apply: true
      loop: "{{ rules }}"
      loop_control:
        label: "{{ item.name }}"
  any_errors_fatal: true

# https://intel.github.io/intel-device-plugins-for-kubernetes
# https://intel.github.io/intel-device-plugins-for-kubernetes/cmd/operator/README.html#installation
- name: Install Intel Device Plugins
  tags: intel
  hosts: *hosts
  gather_facts: false
  vars_files: *vars_files
  vars: *vars
  tasks:
    - name: Install Intel Device Plugins Operator Helm chart
      kubernetes.core.helm:
        kubeconfig: "{{ kubeconfig }}"
        chart_repo_url: https://intel.github.io/helm-charts
        chart_ref: intel-device-plugins-operator
        chart_version: "{{ intel_dp_operator_chart_version }}"
        release_name: "{{ intel_dp_operator_release_name }}"
        release_values: "{{ intel_dp_operator_chart_values }}"
        release_namespace: "{{ intel_device_plugins_namespace }}"
        create_namespace: true
        # do not wait because probes must be
        # patched ASAP to pass health checks
        wait: false

    # default 1s timeout for readiness and liveness
    # probes are too optimistic for our environment
    - name: Patch Intel Device Plugins Operator probes
      vars:
        res_kind: Deployment
        res_name: inteldeviceplugins-controller-manager
        res_ns: "{{ intel_device_plugins_namespace }}"
        container: manager
        probes:
          readinessProbe: &probe
            timeoutSeconds: 5 # default=1
          livenessProbe: *probe
      ansible.builtin.include_tasks: tasks/k8s/probes.yml

    - name: Deploy Intel Device Plugin custom resources
      block:
        - name: Wait for IDP webhook service to be available
          # https://docs.ansible.com/ansible/latest/collections/kubernetes/core/k8s_info_module.html
          kubernetes.core.k8s_info:
            kubeconfig: "{{ kubeconfig }}"
            api_version: apps/v1
            kind: Deployment
            name: inteldeviceplugins-controller-manager
            namespace: "{{ intel_device_plugins_namespace }}"
          # https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_loops.html#retrying-a-task-until-a-condition-is-met
          register: deploy_info
          until: >-
            deploy_info.resources[0].status               is defined and
            deploy_info.resources[0].status.readyReplicas is defined and
            deploy_info.resources[0].status.readyReplicas ==
            deploy_info.resources[0].status.replicas
          retries: 20
          delay: 3

        - name: Deploy Intel Device Plugin custom resources
          vars:
            # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/dict2items_filter.html
            plugins: "{{ intel_device_plugin_crs | ansible.builtin.dict2items(
              key_name='type', value_name='def') }}"
          kubernetes.core.k8s:
            kubeconfig: "{{ kubeconfig }}"
            definition: "{{ item.def   }}"
            namespace: "{{ intel_device_plugins_namespace }}"
            state: present
            apply: true
          loop: "{{ plugins }}"
          loop_control:
            label: "{{ item.type }}"
  any_errors_fatal: true
