# https://docs.openwebui.com/
# https://docs.openwebui.com/getting-started/quick-start
# https://docs.openwebui.com/features/evaluation
# https://docs.openwebui.com/features/rag
---
- name: Install Open WebUI on RKE cluster
  tags: install
  hosts: "{{ rke_control_plane_host }}"
  gather_facts: false
  vars_files:
    - vars/kubernetes.yml
    - vars/postgresql.yml
    - vars/valkey.yml
    - vars/storage.yml
    - vars/minio.yml
    - vars/ollama.yml
    - vars/qdrant.yml
    - vars/openwebui.yml
  vars:
    # required kubernetes>=24.2 package only in user virtualenv
    ansible_python_interpreter: "{{ venv_python_interpreter }}"
    kubeconfig: "{{ rke_kubeconfig }}"
    secret_ns: "{{ openwebui_namespace }}"
    create_ns: false
    release: "{{ openwebui_release_name }}"
  pre_tasks:
    - name: Get the PostgreSQL image used
      # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/include_tasks_module.html
      ansible.builtin.include_tasks: tasks/postgresql/image.yml
      when: postgresql_image is not defined
  tasks:
    # https://docs.openwebui.com/getting-started/env-configuration
    - name: Create Open WebUI extraEnv secret
      vars:
        pipelines: "{{ openwebui_chart_values.pipelines }}"
        secret_name: "{{ openwebui_secrets['env-vars'] }}"
        secret_data:
          # secret key used to sign JWTs:
          # https://docs.openwebui.com/getting-started/env-configuration/#webui_secret_key
          WEBUI_SECRET_KEY: "{{ openwebui_secret_key }}"
          # https://docs.openwebui.com/getting-started/env-configuration/#database-pool
          DATABASE_URL: "{{ openwebui_postgresql_url }}"
          # https://docs.openwebui.com/getting-started/env-configuration/#redis
          REDIS_URL: "{{ openwebui_redis_url }}"
          # https://docs.openwebui.com/getting-started/env-configuration/#qdrant
          QDRANT_API_KEY: "{{ qdrant_api_key.read_write }}"
          # https://docs.openwebui.com/getting-started/env-configuration/#s3_secret_access_key
          S3_SECRET_ACCESS_KEY: "{{ minio_client_pass }}"
          # Pipelines key must be first:
          # https://docs.openwebui.com/getting-started/env-configuration/#openai_api_keys
          # https://docs.openwebui.com/pipelines/#-quick-start-with-docker
          OPENAI_API_KEYS: >-
            {% set keys = [openai_api_key] -%}
            {% if pipelines.enabled -%}
            {%   set _ = keys.insert(0, pipelines_api_key) -%}
            {% endif -%}
            {{ keys | join(';') }}
        create_ns: true
      ansible.builtin.include_tasks: tasks/k8s/secrets/generic.yml

    - name: Create Open WebUI database secret
      vars:
        secret_name: "{{ openwebui_secrets['database'] }}"
        cert_name: open-webui-database
        days: 365
        sans:
          - "{{ openwebui_db_user }}"
          - "{{ openwebui_db_user }}@{{ homelab_domain }}"
      ansible.builtin.include_tasks: tasks/k8s/secrets/tls.step.yml

    - name: Create Open WebUI ingress secret
      vars:
        secret_name: "{{ openwebui_secrets['ingress'] }}"
        cert_name: open-webui-ingress
        sans: "{{ openwebui_fqdns }}"
      ansible.builtin.include_tasks: tasks/k8s/secrets/tls.step.yml

    - name: Install Open WebUI Helm chart
      # https://docs.ansible.com/ansible/latest/collections/kubernetes/core/helm_module.html
      kubernetes.core.helm:
        kubeconfig: "{{ kubeconfig }}"
        chart_repo_url: https://helm.openwebui.com
        chart_ref: open-webui
        chart_version: "{{ openwebui_chart_version }}"
        release_name: "{{ openwebui_release_name }}"
        release_namespace: "{{ openwebui_namespace }}"
        release_values: "{{ openwebui_chart_values }}"
        history_max: "{{ helm_max_history }}"
        atomic: true
        wait: true
      timeout: 300
  any_errors_fatal: true

# https://openwebui.fourteeners.local/docs
- name: Configure Open WebUI installation
  tags:
    - configure
    - knowledge
  hosts: localhost
  gather_facts: false
  vars_files:
    - vars/kubernetes.yml
    - vars/openwebui.yml
    - vars/ollama.yml
  vars:
    vars_file: vars/ollama.{{ use_ollama_chart_by }}.yml
    api_base: https://{{ openwebui_fqdns | first }}/api
  pre_tasks:
    - name: Include {{ vars_file }}
      # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/include_vars_module.html
      ansible.builtin.include_vars: "{{ vars_file }}"

    - name: Wait until Open WebUI is ready
      # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/uri_module.html
      ansible.builtin.uri:
        url: "{{ api_base }}/version"
        return_content: true
      # https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_loops.html#retrying-a-task-until-a-condition-is-met
      register: ui_version
      until: ui_version.status == 200
      retries: 20
      delay: 3
  tasks:
    - name: Authenticate as the admin user
      ansible.builtin.uri:
        method: POST
        url: "{{ api_base }}/v1/auths/signin"
        body_format: json
        body:
          email: "{{ openwebui_admin_user.email }}"
          password: "{{ openwebui_admin_user.password }}"
        status_code: [200, 400]
        return_content: true
      register: admin_signin

    - name: Create Open WebUI admin user
      when: admin_signin.status != 200
      block:
        # first user created has admin rights:
        # https://docs.openwebui.com/features/workspace/roles
        - name: Create Open WebUI admin user
          ansible.builtin.uri:
            method: POST
            url: "{{ api_base }}/v1/auths/signup"
            body_format: json
            body: "{{ openwebui_admin_user }}"
            return_content: true
          register: admin_signup
          changed_when: admin_signup.status == 200
          until: admin_signup.status == 200
          retries: 2
          delay: 5

        - name: Set user default chat model
          vars:
            token: "{{ admin_signup.json.token }}"
          ansible.builtin.uri:
            method: POST
            url: "{{ api_base }}/v1/users/user/settings/update"
            headers:
              Authorization: Bearer {{ token }}
            body_format: json
            body:
              ui:
                version: "{{ ui_version.json.version }}"
                system: "{{ openwebui_system_prompt }}"
                models: "{{ [ollama_models | first] }}"
                params: {}
          register: update_settings
          changed_when: update_settings.status == 200

    - name: Set admin auth_headers fact
      vars:
        user: >-
          {{ admin_signup.json if admin_signup is defined and
             admin_signup.json                 is defined else
             admin_signin.json }}
      ansible.builtin.set_fact:
        auth_headers:
          Authorization: Bearer {{ user.token }}
        admin_token: "{{ user.token }}"
        admin_user_id: "{{ user.id }}"
        api_base: "{{ api_base }}"

    - name: Get Open WebUI user groups
      ansible.builtin.uri:
        url: "{{ api_base }}/v1/groups/"
        headers: "{{ auth_headers }}"
        return_content: true
      register: list_groups

    - name: Create Erhhung's Family group
      vars:
        family: "{{ list_groups.json | selectattr('name','==','Family') }}"
      when: family is not truthy
      block:
        - name: Create the "Family" group
          ansible.builtin.uri:
            method: POST
            url: "{{ api_base }}/v1/groups/create"
            headers: "{{ auth_headers }}"
            body_format: json
            body:
              name: Family
              description: Erhhung's Family
            return_content: true
          register: create_group
          changed_when: create_group.status == 200

        - name: Add admin to Family group
          vars:
            group: "{{ create_group.json }}"
          ansible.builtin.uri:
            method: POST
            url: "{{ api_base }}/v1/groups/id/{{ group.id }}/update"
            headers: "{{ auth_headers }}"
            body_format: json
            body:
              # name and description must
              # be specified at a minimum
              name: "{{ group.name }}"
              description: "{{ group.description }}"
              user_ids: "{{ [admin_user_id] }}"
          register: update_group
          changed_when: update_group.status == 200

    - name: Set family_group_id fact
      ansible.builtin.set_fact:
        family_group_id: >-
          {{ create_group.json.id if create_group is defined and
             create_group.json                    is defined else
              list_groups.json | selectattr('name','==','Family')
                               |   map(attribute='id') | first }}

    - name: Get Open WebUI user memories
      ansible.builtin.uri:
        url: "{{ api_base }}/v1/memories/"
        headers: "{{ auth_headers }}"
        return_content: true
      register: list_memories

    - name: Populate Erhhung's memories
      vars:
        current: "{{ list_memories.json | selectattr('user_id','==',admin_user_id) }}"
      when: current is not truthy
      block:
        - name: Read encrypted memories.yaml
          vars:
            mem_file: files/openwebui/memories.yaml.gz.age
          # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/shell_module.html
          ansible.builtin.shell: |
            age_file="{{ mem_file }}"
            tmp_file="/tmp/$(basename "$age_file")"
            yml_file="${tmp_file/%.gz.age/}"

            cp -f "$age_file" /tmp
            ./gzage.sh "$tmp_file"
            cat   "$yml_file"
            rm -f "$yml_file"
          register: memories_yaml
          changed_when: false

        - name: Add new content to memories
          vars:
            memories: "{{ memories_yaml.stdout | from_yaml }}"
          ansible.builtin.uri:
            method: POST
            url: "{{ api_base }}/v1/memories/add"
            headers: "{{ auth_headers }}"
            body_format: json
            body:
              content: "{{ item.content }}"
          loop: "{{ memories }}"
          loop_control:
            label: "{{ item.title }}"
          register: add_memory
          changed_when: add_memory.status == 200

    - name: Get Open WebUI knowledge base
      ansible.builtin.uri:
        url: "{{ api_base }}/v1/knowledge/"
        headers: "{{ auth_headers }}"
        return_content: true
      register: list_knowledge

    - name: Create Accounts knowledge
      vars:
        knowledge: "{{ list_knowledge.json | selectattr('name','==','Accounts') }}"
      ansible.builtin.uri:
        method: POST
        url: "{{ api_base }}/v1/knowledge/create"
        headers: "{{ auth_headers }}"
        body_format: json
        body:
          name: Accounts
          description: Confidential information and notable events about various accounts
          access_control:
            read:
              group_ids: "{{ [family_group_id] }}"
            write:
              user_ids: "{{ [admin_user_id] }}"
        return_content: true
      register: create_knowledge
      when: knowledge is not truthy
      changed_when: create_knowledge.status == 200

    # pass var to the next play since
    # scope of registered variable in
    # Ansible is limited to this play
    - name: Set accounts_knowledge fact
      vars:
        knowledge: "{{ list_knowledge.json | selectattr('name','==','Accounts') }}"
      ansible.builtin.set_fact:
        accounts_knowledge: >-
          {{ knowledge | first if knowledge is truthy else create_knowledge.json }}

    - name: Get Open WebUI custom models
      ansible.builtin.uri:
        url: "{{ api_base }}/v1/models/"
        headers: "{{ auth_headers }}"
        return_content: true
      register: list_models

    - name: Create Accounts custom model
      vars:
        model: "{{ list_models.json | selectattr('name','==','Accounts') }}"
        base_model: "{{ ollama_models | select('search','^qwen3') | first }}"
        # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/file_lookup.html
        png_b64: "{{ lookup('ansible.builtin.file', 'files/openwebui/ai-assistant.png') | b64encode }}"
        image_url: data:image/png;base64,{{ png_b64 }}
      ansible.builtin.uri:
        method: POST
        url: "{{ api_base }}/v1/models/create"
        headers: "{{ auth_headers }}"
        body_format: json
        body:
          id: accounts
          name: Accounts
          meta:
            description: Qwen3 base model RAG-enhanced with Accounts knowledge base
            tags:
              - name: private
            profile_image_url: "{{ image_url }}"
            capabilities:
              citations: true
              file_upload: true
              web_search: false
              code_interpreter: false
              image_generation: false
              vision: false
            knowledge:
              # must provide entire object
              - "{{ accounts_knowledge }}"
          base_model_id: "{{ base_model }}"
          params:
            system: >-
              You are a personal assistant that has intimate knowledge of all
              personal information entrusted to you in the attached knowledge
              base. When you answer questions, consult the personal knowledge
              base before applying additional general knowledge.
          access_control:
            read:
              group_ids: "{{ [family_group_id] }}"
            write:
              user_ids: "{{ [admin_user_id] }}"
        return_content: true
      register: create_model
      when: model is not truthy
      changed_when: create_model.status == 200

    - name: Set accounts_model fact
      vars:
        model: "{{ list_models.json | selectattr('name','==','Accounts') }}"
      ansible.builtin.set_fact:
        accounts_model: >-
          {{ model | first if model is truthy else create_model.json }}
  any_errors_fatal: true

# NOTE: this play takes a long time to run because it loops through hundreds of files
# and, for each, checks with Open WebUI whether it exists or has changed, and uploads
# and processes the file if necessary; thus, this play will only run if it's the only
# play specified to run and the "knowledge" tag is also specified on the command line

- name: Update Accounts knowledge
  # must run after previous play to
  # get auth token and knowledge ID
  tags: knowledge
  hosts: cosmos
  gather_facts: false
  vars_files:
    - vars/kubernetes.yml
    - vars/openwebui.yml
  vars:
    facts: "{{ hostvars['localhost'] }}"
    # PLAYBOOKS and TAGS are global vars
    # injected by play.sh wrapper script
    playbooks: |
      {{  PLAYBOOKS | split(',') if PLAYBOOKS is defined and PLAYBOOKS is truthy else [] }}
    tags_: "{{ TAGS | split(',') if      TAGS is defined and      TAGS is truthy else [] }}"
    run_play: >-
      {{  playbooks | length == 1 and
         'openwebui' in playbooks and
         'knowledge' in tags_ }}
  pre_tasks:
    - name: Gather facts about user_dir
      # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/setup_module.html
      ansible.builtin.setup:
        gather_subset: user_dir
      when: run_play

    - name: Find ~/accounts/*.txt files
      # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/find_module.html
      ansible.builtin.find:
        paths: ~/accounts/
        follow: true
        recurse: true
        patterns: "*.txt"
        get_checksum: true
      register: find_files
      when: run_play
  tasks:
    # order by recently modified
    - name: Add file to knowledge
      vars:
        auth_token: "{{ facts['admin_token'] }}"
        knowledge: "{{ facts['accounts_knowledge'] }}"
        accts_dir: "{{ ansible_user_dir }}/accounts/"
        # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/strftime_filter.html
        acct_files: |
          {% set files  = [] %}
          {% set sorted = find_files.files | sort(attribute='mtime', reverse=true) %}
          {% set total  = sorted    | length %}
          {% set n      = accts_dir | length %}
          {% for i  in range(total) %}
          {%   set file = sorted[i] %}
          {%   set _    = files.append({
                 'total':     total,
                 'index':     i + 1,
                 'abs_path':  file.path,
                 'rel_path':  file.path[n:],
                 'sha1':      file.checksum,
                 'size':      file.size,
                 'mtime':    '%Y-%m-%d %H:%M:%S' | strftime(file.mtime),
               })   %}
          {% endfor %}
          {{ files  }}
        file_info: "{{ item }}"
      ansible.builtin.include_tasks: tasks/openwebui/upload.yml
      loop: "{{ acct_files }}"
      loop_control:
        label: "{{ item.rel_path }}"
      register: upload_files
      when: run_play

    - name: Were any files changed?
      ansible.builtin.set_fact:
        files_changed: >-
          {{ upload_files.results is defined and
             upload_files.results  | selectattr('changed') is truthy }}

    # this step is currently needed so that the custom model,
    # which was created with an initially empty knowledge, is
    # updated with all file references from updated knowledge:
    # https://github.com/open-webui/open-webui/issues/16318
    - name: Update Accounts model
      delegate_to: localhost
      when: files_changed
      vars:
        api_base: "{{ facts['api_base'] }}/v1"
        model: "{{ facts['accounts_model'] }}"
        know_id: "{{ model.meta.knowledge[0].id }}"
        auth_headers: "{{ facts['auth_headers'] }}"
      block:
        - name: Refresh Accounts knowledge
          ansible.builtin.uri:
            url: "{{ api_base }}/knowledge/{{ know_id }}"
            headers: "{{ auth_headers }}"
            return_content: true
          register: new_knowledge

        - name: Update Accounts model
          ansible.builtin.uri:
            method: POST
            url: "{{ api_base }}/models/model/update?id=accounts"
            headers: "{{ auth_headers }}"
            body_format: json
            body: |
              {% set _ = model.meta.update({
                   'knowledge': [new_knowledge.json]
                 }) %}
              {{ model }}
          register: update_model
          changed_when: update_model.status == 200
  any_errors_fatal: true
