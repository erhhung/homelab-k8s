---
- name: Install required packages
  tags: install
  hosts: k8s_all
  vars_files:
    - vars/packages.yml
  tasks:
    - name: Install required Apt packages
      become: true
      block:
        - name: Configure Apt package sources
          # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/include_tasks_module.html
          ansible.builtin.include_tasks: tasks/packages/apt/sources.yml
          loop: "{{ apt_sources }}"
          loop_control:
            loop_var: source
            label: "{{ source.sources.file }}"

        - name: Add Apt package repositories
          # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/apt_repository_module.html
          ansible.builtin.apt_repository:
            repo: "{{ item[1] }}"
            state: present
          # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/subelements_filter.html
          loop: "{{ apt_repositories | ansible.builtin.subelements('repos') }}"
          loop_control:
            label: "{{ item[0].hosts | join(',') ~'|'~ item[1] }}"
          when: inventory_hostname in item[0].hosts
          # task could fail due to normal Apt updates
          # that hold lock, so retry until successful
          retries: 3
          delay: 5

        - name: Install required Apt packages
          # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/apt_module.html
          ansible.builtin.apt:
            name: "{{ item.packages }}"
            state: present
            update_cache: true
            force_apt_get: true
            install_recommends: false
          loop: "{{ apt_packages }}"
          loop_control:
            label: "{{ item.hosts | join(',') ~'|...' }}"
          when: inventory_hostname in item.hosts
          retries: 3
          delay: 5

        - name: Clean downloaded Apt packages
          ansible.builtin.apt:
            autoremove: true
            clean: true
            purge: true
          # otherwise always
          # reports "changed"
          changed_when: false
          retries: 3
          delay: 5

        - name: Configure installed packages
          # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/shell_module.html
          ansible.builtin.shell: |
            set -eo pipefail
            rc=9

            # set binaries setuid bit so these
            # commands can be run without sudo
            cmds=(
              lsof
              iotop
            )
            for cmd in "${cmds[@]}"; do
              bin=$(realpath $(command -v $cmd))
              [[ "$(stat -c %A $bin)"  == *s* ]] || {
                chmod u+s $bin
                rc=0
              }
            done
            exit $rc
          args:
            executable: /bin/bash
          register: config_pkgs
          changed_when: config_pkgs.rc == 0
          failed_when: config_pkgs.rc not in [0,9]

    # create virtualenv in user's home directory
    - name: Install required Pip packages
      # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/pip_module.html
      ansible.builtin.pip:
        name: "{{ pip_packages }}"
        state: present
        virtualenv: "{{ ansible_user_virtualenv }}"

    # plugins are installed in the user's home
    # directory under .local/share/helm/plugins
    - name: Install useful Helm plugins
      # https://docs.ansible.com/ansible/latest/collections/kubernetes/core/helm_plugin_module.html
      kubernetes.core.helm_plugin:
        plugin_name: "{{ item.name | default(omit) }}"
        plugin_path: "{{ item.path | default(omit) }}"
        state: "{{ item.state | default('present') }}"
      loop: "{{ helm_plugins }}"
  any_errors_fatal: true

- name: Install apps from GitHub releases
  tags: github
  hosts: k8s_all
  gather_facts: false
  become: true
  tasks:
    - name: Install mikefarah/yq from GitHub
      ansible.builtin.shell: |
        set -o pipefail

        REL="https://github.com/mikefarah/yq/releases/latest"
        VER=$(curl -Is $REL | sed -En 's/^location:.+\/tag\/v(.+)\r$/\1/p')

        # check if latest version already installed
        command -v yq &> /dev/null && {
          ver=$(v=(`yq --version`); echo ${v[-1]#v})
          [ "$ver" == "$VER" ] && exit 9 # no change
        }
        mkdir -p /tmp/yq
        ( cd     /tmp/yq

          ARCH=$(uname -m | sed -e 's/aarch64/arm64/' \
                                -e  's/x86_64/amd64/')
          curl -fsSL "$REL/download/yq_linux_$ARCH.tar.gz" | \
            tar -xz --no-same-owner
          cp ./yq_linux_$ARCH /usr/bin/yq
          ./install-man-page.sh

        ); rm -rf /tmp/yq
      args:
        executable: /bin/bash
      register: install_yq
      changed_when: install_yq.rc == 0
      failed_when: install_yq.rc not in [0,9]

    - name: Install Fastfetch from GitHub
      ansible.builtin.shell: |
        set -o pipefail

        REL="https://github.com/fastfetch-cli/fastfetch/releases/latest"
        VER=$(curl -Is $REL | sed -En 's/^location:.+\/tag\/(.+)\r$/\1/p')

        # check if latest version already installed
        command -v fastfetch &> /dev/null && {
          ver=$(v=(`fastfetch --version`); echo ${v[1]})
          [ "$ver" == "$VER" ] && exit 9 # no change
        }
        ARCH=$(uname -m | sed -e 's/x86_64/amd64/') # or aarch64
        curl -fsSL "$REL/download/fastfetch-linux-$ARCH.tar.gz" | \
          tar -xz -C / --no-same-owner --strip-components=1 \
            fastfetch-linux-$ARCH
      args:
        executable: /bin/bash
      register: install_ff
      changed_when: install_ff.rc == 0
      failed_when: install_ff.rc not in [0,9]
  any_errors_fatal: true
