# postgresql_pass: {vault.yml}
#     pgpool_pass: {vault.yml}

# in order to log in using client TLS cert, generate
# a cert at pki.fourteeners.local using CN=<db_user>
postgresql_users:
  - erhhung
  - scraper
  - "{{ keycloak_db_user }}"
  - "{{ openwebui_db_user }}"
  - "{{ flowise_db_user }}"

postgresql_superuser: erhhung

postgresql_namespace: postgresql
postgresql_host_names: # 192.168.0.222
  - postgresql
  - postgres
  - pg

# remember to add postgresql.fourteeners.local (also postgres.
# and pg.) to pfSense DNS using kube virtual IP 192.168.0.222
# https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_filters.html#products
postgresql_fqdns: "{{ postgresql_host_names | product(search_domains) | map('join','.') }}"

# https://docs.ansible.com/ansible/latest/collections/ansible/utils/ipmath_filter.html
# (requires Python package "netaddr" on Ansible controller)
postgresql_lb_ip: "{{ rke_lb_vip | ansible.utils.ipmath(1) }}"

pgpool_service_host: postgresql-pgpool.{{ postgresql_namespace }}.svc.{{ cluster_domain }}
pgpool_service_port: 5432
pgpool_service_url: postgresql://{{ pgpool_service_host }}:{{ pgpool_service_port }}

postgresql_secrets:
  node-tls: postgresql-node-tls
  # this secret isn't created in the PostgreSQL
  # namespace--it's created in other namespaces
  # to enable installation of custom extensions
  # that require superuser privileges
  superuser: database-superuser

# https://github.com/bitnami/charts/tree/main/bitnami/postgresql-ha
postgresql_chart_version: "16.2.2"
postgresql_release_name: postgresql

# https://github.com/bitnami/charts/tree/main/bitnami/postgresql-ha/values.yaml
postgresql_chart_values:
  nameOverride: "{{ postgresql_release_name }}"

  global:
    defaultStorageClass: "{{ storage_classes['default'] }}"
    postgresql: &global_postgresql
      password: "{{ postgresql_pass }}" # user "postgres"
      repmgrPassword: "{{ postgresql_pass }}" # user "repmgr"
    pgpool: &global_pgpool
      adminPassword: "{{ postgresql_pass }}" # user "admin"

  persistence:
    storageClass: "{{ storage_classes['default'] }}"
    size: 2Gi
    mountPath: /postgresql

  postgresql:
    replicaCount: 3

    # duplicate global settings or
    # else helm diff upgrade fails
    <<: *global_postgresql
    pgHbaTrustAll: true

    # https://github.com/bitnami/charts/tree/main/bitnami/postgresql-ha#securing-traffic-using-tls
    tls: &node_tls
      enabled: true
      certificatesSecret: "{{ postgresql_secrets['node-tls'] }}"
      certFilename: tls.crt
      certKeyFilename: tls.key
      certCAFilename: ca.crt

    # https://github.com/bitnami/charts/tree/main/bitnami/postgresql-ha#resource-requests-and-limits
    # use a preset instead of explicitly configuring resources:
    # none, nano, micro, small, medium, large, xlarge, 2xlarge
    # https://github.com/bitnami/charts/tree/main/bitnami/common/templates/_resources.tpl
    resourcesPreset: micro
    # resources: ~

    priorityClassName: "{{ priority_classes['database'] }}"

    # https://github.com/bitnami/charts/tree/main/bitnami/postgresql-ha#initialize-a-fresh-instance
    initdbScripts:
      # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/template_lookup.html
      init.sql: "{{ lookup('ansible.builtin.template', template_dir ~ '/postgresql/init.sql.j2') }}"

  pgpool:
    replicaCount: 1

    # duplicate global settings or
    # else helm diff upgrade fails
    <<: *global_pgpool

    # use same certificate as postgresql:
    # https://github.com/bitnami/charts/tree/main/bitnami/postgresql-ha#securing-traffic-using-tls
    tls: *node_tls

    # use a preset instead of explicitly configuring resources:
    # none, nano, micro, small, medium, large, xlarge, 2xlarge
    resourcesPreset: micro
    # resources: ~

    priorityClassName: "{{ priority_classes['database'] }}"

    # the exec probes cause more load
    # and restarts than being helpful
    readinessProbe: &probe
      enabled: false
    livenessProbe: *probe

    customUsers:
      # semicolon-separated list of usernames & passwords
      # of users that will connect to database via pgpool
      usernames: "{{ postgresql_users | join(';') }}"
      passwords: |-
        {% set pwds = [] -%}
        {% for _ in postgresql_users -%}
        {%   set _ = pwds.append(pgpool_pass) -%}
        {% endfor -%}
        {{ pwds | join(';') }}

    sidecars:
      # https://github.com/pgpool/pgpool2_exporter
      # currently disabled because pgpool-exporter
      # cannot connect to Pgpool endpoint via mTLS:
      # https://github.com/pgpool/pgpool2_exporter/issues/43

      # - name: pgpool-exporter
      #   image: docker.io/pgpool/pgpool2_exporter
      #   imagePullPolicy: IfNotPresent
      #   env:
      #     - name: POSTGRES_USERNAME
      #       value: scraper
      #     - name: POSTGRES_PASSWORD
      #       valueFrom:
      #         secretKeyRef:
      #           name: postgresql-postgresql
      #           key: password
      #     - name: POSTGRES_DATABASE
      #       value: postgres
      #     - name: PGPOOL_SERVICE
      #       value: localhost
      #     - name: PGPOOL_SERVICE_PORT
      #       value: "{{ pgpool_service_port }}"
      #     - name: SSLMODE
      #       value: verify-full
      #   ports:
      #     # exposed by service in extraDeploy
      #     - name: metrics
      #       containerPort: 9719
      #       protocol: TCP
      #   securityContext:
      #     runAsUser: 1001
      #     runAsGroup: 1001
      #     capabilities:
      #       drop: ["ALL"]
      #   volumeMounts:
      #     - name: scraper-tls
      #       mountPath: /tls/scraper

    extraVolumes:
      - name: scraper-tls
        secret:
          secretName: "{{ monitoring_secrets['scraper'] }}"

  service: # port 5432
    # since PostgreSQL does not talk HTTP, we do not create
    # an Ingress; instead, we create a LoadBalancer service:
    # https://github.com/bitnami/charts/tree/main/bitnami/postgresql-ha#configure-the-way-how-to-expose-postgresql
    type: LoadBalancer
    loadBalancerIP: "{{ postgresql_lb_ip }}"

  metrics:
    # adds postgres-exporter sidecar container:
    # https://github.com/bitnami/charts/tree/main/bitnami/postgresql-ha#prometheus-metrics
    # https://github.com/prometheus-community/postgres_exporter
    enabled: true

    # scrape dedicated postgresql-metrics
    # service on HTTP "metrics" port 9187
    serviceMonitor:
      enabled: "{{ prometheus_crds_installed }}"
      labels: &monitor_labels
        release: "{{ monitoring_release_name }}"
      selector: *monitor_labels

  # NOTE: Helm will render these manifests as templates,
  # but the only templating currently used are processed
  # first by Ansible
  extraDeploy:
    # the following resources are currently disabled
    # because pgpool-exporter sidecar cannot connect
    # to Pgpool endpoint via mTLS:
    # https://github.com/pgpool/pgpool2_exporter/issues/43
    - |-
      {% if prometheus_crds_installed and false %}
      # create a service to expose metrics endpoint from
      # pgpool-exporter sidecar of postgresql-pgpool pod
      #
      apiVersion: v1
      kind: Service
      metadata:
        name: {{ postgresql_release_name }}-pgpool-metrics
        labels:
          app.kubernetes.io/name: postgresql
          app.kubernetes.io/component: pgpool
          app.kubernetes.io/instance: {{ postgresql_release_name }}
          release: {{ monitoring_release_name }}
      spec:
        type: ClusterIP
        selector:
          app.kubernetes.io/name: postgresql
          app.kubernetes.io/component: pgpool
          app.kubernetes.io/instance: {{ postgresql_release_name }}
        ports:
          - name: metrics
            port: 9719
            protocol: TCP
            targetPort: metrics
      ---
      apiVersion: monitoring.coreos.com/v1
      kind: ServiceMonitor
      metadata:
        name: {{ postgresql_release_name }}-pgpool
        labels:
          app.kubernetes.io/name: postgresql
          app.kubernetes.io/component: pgpool
          app.kubernetes.io/instance: {{ postgresql_release_name }}
          # required by serviceMonitorSelector!
          release: {{ monitoring_release_name }}
      spec:
        namespaceSelector:
          matchNames:
            - {{ postgresql_namespace }}
        selector:
          matchLabels:
            app.kubernetes.io/name: postgresql
            app.kubernetes.io/component: pgpool
            release: {{ monitoring_release_name }}
        endpoints:
          - port: metrics
            path: /metrics
            interval: 30s
      {% endif %}

# https://grafana.com/grafana/dashboards/?search=PostgreSQL&dataSource=prometheus
postgresql_grafana_dashboards:
  # https://grafana.com/grafana/dashboards/9628-postgresql-database
  - title: PostgreSQL Database
    gnetId: 9628
