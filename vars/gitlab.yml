# gitlab_root_pass: {vault.yml}
# gitlab_secrets_data: generated by files/gitlab/secrets.sh
#           and stored encrypted in vars/gitlab.secrets.yml

gitlab_namespace: gitlab
# aliases of "homelab" and direct
# subdomains of fourteeners.local
gitlab_host_names:
  gitlab: gitlab
  pages: pages.gitlab

# add gitlab.fourteeners.local and its subdomains to pfSense
# DNS as aliases of homelab.fourteeners.local: 192.168.0.221
# https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_filters.html#products
gitlab_fqdns: |
  {% set fqdns = {} %}
  {% for service, host in gitlab_host_names.items() %}
  {%   set _ = fqdns.update({
         service: [host] | product(search_domains) | map('join','.') | first
       })   %}
  {% endfor %}
  {{ fqdns  }}

gitlab_service_host: "{{ gitlab_release_name }}-webservice-default.{{
  gitlab_namespace }}.svc.{{ cluster_domain }}"
gitlab_service_port: 8181 # https-workhorse
gitlab_service_url: https://{{ gitlab_service_host }}:{{ gitlab_service_port }}

# make sure port matches the one defined by
# nginx_tcp_services in vars/kubernetes.yml
gitlab_shell_port: 10022

gitlab_secrets:
  # license: gitlab-license
  node-tls: gitlab-node-tls
  certs: gitlab-certificates
  database: gitlab-database-tls
  storage: gitlab-object-store
  # root/postgresql/redis/smtp
  passwords: gitlab-passwords
  host-keys: gitlab-host-keys
  # shell/gitaly/praefect
  tokens: gitlab-auth-tokens
  # reviewers/workhorse/kas
  shared: gitlab-shared-secrets
  rails: gitlab-rails-secrets
  pages: gitlab-pages-secrets
  runner: gitlab-runner-token
  # kas: gitlab-kas-secrets
  zoekt: gitlab-zoekt-secrets
  registry: gitlab-registry-secrets

gitlab_db_user: gitlab
gitlab_db_name: gitlab
praefect_db_name: praefect
# use {{ pgpool_pass }}

# provider settings will be stored
# in "gitlab-object-store" secret:
# https://docs.gitlab.com/charts/charts/globals#consolidated-object-storage
# https://gitlab.com/gitlab-org/charts/gitlab/tree/master/examples/objectstorage/rails.s3.yaml
gitlab_minio_config:
  provider: AWS
  region: "{{ minio_region }}"
  endpoint: "{{ minio_service_url }}"
  path_style: true
  aws_access_key_id: gitlab
  aws_secret_access_key: "{{ minio_client_pass }}"
  aws_signature_version: 4

# separate buckets are required for each object type;
# there does not appear to be prefix support, either:
# https://docs.gitlab.com/charts/advanced/external-object-storage#lfs-artifacts-uploads-packages-external-diffs-terraform-state-dependency-proxy-secure-files
gitlab_buckets: |
  {% set types = [
       'artifacts', 'packages', 'uploads',
       'lfs', 'backups', 'temp', 'cache',
     ] %}
  {% set buckets = {}  %}
  {% for type in types %}
  {%   set _ = buckets.update({type: 'gitlab-'~ type}) %}
  {% endfor  %}
  {{ buckets }}

# https://gitlab.com/gitlab-org/charts/gitlab
gitlab_chart_version: "9.3.1"
gitlab_release_name: gitlab

# https://gitlab.com/gitlab-org/charts/gitlab/tree/master/values.yaml
gitlab_chart_values:
  # advanced config using external services:
  # https://docs.gitlab.com/charts/advanced

  global:
    # community edition is basically the enterprise edition at
    # the free (no license) tier, but with ability to activate
    # extra features by upgrading license only (no re-install):
    # https://gitlab-com.gitlab.io/cs-tools/gitlab-cs-tools/gitlab-feature-matrix
    edition: ee # "ee" or "ce"

    # https://docs.gitlab.com/charts/charts/globals#configure-host-settings
    hosts:
      https: true
      gitlab:
        name: "{{ gitlab_fqdns['gitlab'] }}"
      pages:
        name: "{{ gitlab_fqdns['pages'] }}"
      # SSH access on port 10022
      # (see nginx_tcp_services)
      ssh: "{{ gitlab_fqdns['gitlab'] }}"

    geo:
      # just single homelab location
      enabled: false

    # https://docs.gitlab.com/charts/charts/globals#custom-time-zone-for-all-containers
    time_zone: "{{ system_time_zone }}"

    extraEnv:
      # DEBUG|INFO|WARN|ERROR
      GITLAB_LOG_LEVEL: WARN

    gitlab:
      license: {}
      # secret: "{{ gitlab_secrets['license'] }}"
      # key: license

    initialRootPassword:
      secret: "{{ gitlab_secrets['passwords'] }}"
      key: root

    # specify CA certs that init containers
    # should inject into system trust store:
    # https://docs.gitlab.com/charts/charts/globals#custom-certificate-authorities
    certificates:
      customCAs:
        - secret: "{{ gitlab_secrets['node-tls'] }}"
          keys: ["ca.crt"]

    # https://docs.gitlab.com/charts/charts/globals#configure-postgresql-settings
    psql:
      host: "{{ pgpool_service_host }}"
      port: "{{ pgpool_service_port }}"
      # https://docs.gitlab.com/charts/charts/globals#postgresql-ssl
      ssl: &psql-ssl
        secret: "{{ gitlab_secrets['database'] }}"
        clientCertificate: tls.crt
        clientKey: tls.key
        serverCA: ca.crt
      username: "{{ gitlab_db_user }}"
      password:
        useSecret: true
        secret: "{{ gitlab_secrets['passwords'] }}"
        key: postgresql
      database: "{{ gitlab_db_name }}"

    # use the single-instance Redis installed by the chart
    # because GitLab doesn't support Redis in cluster mode:
    # https://docs.gitlab.com/administration/redis/replication_and_failover_external
    # https://docs.gitlab.com/charts/charts/globals#configure-redis-settings
    redis:
      auth:
        enabled: true
        secret: "{{ gitlab_secrets['passwords'] }}"
        key: redis

    # https://docs.gitlab.com/charts/charts/minio
    minio:
      # use cluster-wide MinIO for LFS
      # and artifacts storage instead:
      # global.appConfig.object_store
      enabled: false

    # https://docs.gitlab.com/charts/installation/secrets#gitlab-rails-secret
    railsSecrets:
      secret: "{{ gitlab_secrets['rails'] }}"

    # https://docs.gitlab.com/charts/charts/globals#configure-gitlab-shell
    # https://docs.gitlab.com/charts/charts/gitlab/gitlab-shell
    shell:
      port: "{{ gitlab_shell_port }}"
      # https://docs.gitlab.com/charts/charts/gitlab/gitlab-shell#hostkeyssecret
      hostKeys:
        secret: "{{ gitlab_secrets['host-keys'] }}"
      # https://docs.gitlab.com/charts/charts/gitlab/gitlab-shell#authtoken
      authToken:
        secret: "{{ gitlab_secrets['tokens'] }}"
        key: shell
      # https://docs.gitlab.com/charts/charts/globals#tcp-proxy-protocol
      tcp:
        proxyProtocol: false

    # https://docs.gitlab.com/charts/charts/globals#configure-gitaly-settings
    # NOTE: this subchart is implicitly enabled by Praefect
    # https://docs.gitlab.com/charts/charts/gitlab/gitaly
    gitaly:
      enabled: true

      authToken:
        secret: "{{ gitlab_secrets['tokens'] }}"
        key: gitaly
      # https://docs.gitlab.com/charts/charts/gitlab/gitaly#running-gitaly-over-tls
      tls: &node-tls
        enabled: true
        secretName: "{{ gitlab_secrets['node-tls'] }}"

      internal:
        names: ["default"]
      external: []

    # https://about.gitlab.com/blog/high-availability-git-storage-with-praefect
    # https://docs.gitlab.com/charts/charts/globals#configure-praefect-settings
    # NOTE: this subchart consumes the Gitaly subchart to deploy
    # multiple Gitaly instances using settings in global.gitaly:
    # https://docs.gitlab.com/charts/charts/gitlab/praefect
    praefect:
      enabled: true
      replaceInternalGitaly: true

      authToken:
        secret: "{{ gitlab_secrets['tokens'] }}"
        key: praefect
      # https://docs.gitlab.com/charts/charts/gitlab/praefect#running-praefect-over-tls
      tls: *node-tls

      psql:
        host: "{{ pgpool_service_host }}"
        port: "{{ pgpool_service_port }}"
        sslMode: prefer
        # mTLS isn't supported, unfortunately, as generated config.toml
        # doesn't include sslcert/sslkey/sslrootcert database settings:
        # https://gitlab.com/gitlab-org/charts/gitlab/tree/master/charts/gitlab/charts/praefect/templates/configmap.yaml
        ssl: *psql-ssl
        user: "{{ gitlab_db_user }}"
        # must use a separate database because the table
        # (e.g. schema_migrations) schemas are different
        dbName: "{{ praefect_db_name }}"

      dbSecret:
        secret: "{{ gitlab_secrets['passwords'] }}"
        key: postgresql

      # https://docs.gitlab.com/administration/gitaly/praefect#multiple-virtual-storages
      # https://docs.gitlab.com/administration/gitaly/praefect/configure#requirements
      virtualStorages:
        - name: default
          # ideally, there should be an odd number of
          # Gitaly replicas to get transaction quorum
          gitalyReplicas: 2
          maxUnavailable: 1

          # https://docs.gitlab.com/administration/gitaly/praefect
          defaultReplicationFactor: 2
          # this is repeat of global.gitaly.tls.secretName
          tlsSecretName: "{{ gitlab_secrets['node-tls'] }}"

          persistence: &gitaly-persistence
            enabled: true
            ## no need for storage level replicas when
            ## there are multiple Gitaly replicas and
            ## the repository replication factor is 2
            storageClass: "{{ storage_classes['default'] }}"
            accessMode: ReadWriteOnce
            size: 1Gi

    # https://docs.gitlab.com/development/workhorse
    # https://docs.gitlab.com/charts/charts/globals#configure-workhorse-settings
    workhorse:
      scheme: https
      tls:
        enabled: true
      secret: "{{ gitlab_secrets['shared'] }}"
      key: workhorse

    # https://docs.gitlab.com/charts/charts/globals#configure-gitlab-pages
    # https://docs.gitlab.com/charts/charts/gitlab/gitlab-pages
    pages:
      enabled: true

      # https://docs.gitlab.com/user/project/pages/pages_access_control
      # https://docs.gitlab.com/administration/pages#access-control
      # see also: global.oauth.gitlab-pages
      accessControl: true
      apiSecret:
        secret: "{{ gitlab_secrets['pages'] }}"
        key: api
      authSecret:
        secret: "{{ gitlab_secrets['pages'] }}"
        key: auth

    runner:
      registrationToken:
        secret: "{{ gitlab_secrets['runner'] }}"

    # https://docs.gitlab.com/charts/charts/gitlab/kas
    kas:
      # don't need KAS when GitLab rails and
      # runners are all in the same cluster
      enabled: false

    # https://docs.gitlab.com/charts/charts/registry
    registry:
      # use Harbor registry instead
      enabled: false
      # even if not deploying the registry, secrets below
      # must still be created for mounting by toolbox pod
      certificate:
        secret: "{{ gitlab_secrets['registry'] }}"
        # must contain keys registry-auth.crt/.key
      httpSecret:
        secret: "{{ gitlab_secrets['registry'] }}"
        key: http
      notificationSecret:
        secret: "{{ gitlab_secrets['registry'] }}"
        key: notification

    # https://docs.gitlab.com/charts/charts/gitlab/gitlab-zoekt
    zoekt:
      indexer:
        internalApi:
          gitlabUrl: "{{ gitlab_service_url }}"
          secretName: "{{ gitlab_secrets['zoekt'] }}"
          secretKey: api
      gateway:
        basicAuth:
          secretName: "{{ gitlab_secrets['zoekt'] }}"

    # https://docs.gitlab.com/charts/charts/globals#configure-ingress-settings
    ingress:
      enabled: true
      # use custom "node" cert for
      # inter-component and ingress
      configureCertmanager: false

      tls: *node-tls
      class: "{{ rke_ingress_class }}"
      annotations:
        nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
        nginx.ingress.kubernetes.io/ssl-passthrough: "true"
        # https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/annotations#custom-timeouts
        nginx.ingress.kubernetes.io/proxy-read-timeout: "1800"
        nginx.ingress.kubernetes.io/proxy-send-timeout: "1800"
        # allow uploading large files and prevent 413 (Entity
        # Too Large) errors; set to "0" to disable size limit:
        # https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/annotations#custom-max-body-size
        nginx.ingress.kubernetes.io/proxy-body-size: 10m
      path: /
      pathType: Prefix

    monitoring:
      enabled: true

    # https://docs.gitlab.com/charts/charts/globals#outgoing-email
    email:
      display_name: GitLab
      from: "{{ icloud_smtp.from_email }}"
      reply_to: "{{ icloud_smtp.from_email |
        regex_replace('^[^@]+', 'noreply') }}"

    # https://docs.gitlab.com/charts/installation/command-line-options#outgoing-email-configuration
    smtp:
      enabled: true

      address: "{{ icloud_smtp.host }}"
      port: "{{ icloud_smtp.port }}"
      # .tls for using SMTPS on port 465
      # iCloud uses STARTTLS on port 587
      tls: false
      starttls_auto: true
      authentication: login
      user_name: "{{ icloud_smtp.username }}"
      password:
        secret: "{{ gitlab_secrets['passwords'] }}"
        key: smtp

    # https://docs.gitlab.com/charts/charts/globals#configure-oauth-settings
    oauth:
      # required when GitLab Pages
      # access control is enabled
      gitlab-pages:
        secret: "{{ gitlab_secrets['pages'] }}"
        appIdKey: appid
        appSecretKey: appsecret
        redirectUri: https://{{ gitlab_fqdns['pages'] }}/projects/auth
        authScope: api

    appConfig:
      # consolidated object storage config applies to all buckets
      # using DEFAULT bucket names (see gitlab_buckets var above):
      # https://docs.gitlab.com/charts/charts/globals#consolidated-object-storage
      object_store:
        enabled: true
        # proxy file transfers between
        # bucket and client via GitLab
        proxy_download: true
        # secret contains provider-specific connection
        # settings (see gitlab_minio_config var above)
        connection:
          secret: "{{ gitlab_secrets['storage'] }}"
          key: connection

      # https://docs.gitlab.com/charts/charts/globals#outgoing-email
      microsoft_graph_mailer:
        enabled: false

      # https://docs.gitlab.com/charts/charts/gitlab/mailroom#incoming-email
      incomingEmail:
        enabled: false

      # service desk email requires incoming email:
      # https://docs.gitlab.com/charts/charts/gitlab/mailroom#service-desk-email
      serviceDeskEmail:
        enabled: false

      # only used on gitlab.com, but must still
      # be created for mounting by toolbox pod:
      # https://docs.gitlab.com/charts/charts/globals#suggested-reviewers-settings
      suggested_reviewers:
        secret: "{{ gitlab_secrets['shared'] }}"
        key: reviewers

  # ===================================== End of Globals =====================================

  # subchart settings for core GitLab components
  gitlab:
    # migrations job initializes or upgrades the main database:
    # https://docs.gitlab.com/charts/charts/gitlab/migrations
    migrations:
      enabled: true

      extraVolumes: |
        - name: superuser-tls
          secret:
            secretName: {{ postgresql_secrets['superuser'] }}
            defaultMode: 416 # "0640"

      # NOTE: extraInitContainers value as string
      # can be Helm-templated, so be careful with
      # Jinja2-templating using same {{ }} syntax
      extraInitContainers: |
        # wait until Redis is ready before
        # running the migrations container
        - name: wait-redis
          image: wait4x/wait4x
          imagePullPolicy: IfNotPresent
          command:
            - sh
          args:
            - -c
            - |
              wait4x --interval 3s --timeout 0 \
                redis "redis://:${REDIS_PASSWORD}@${REDIS_HOST}:${REDIS_PORT}"
          env:
            {% raw -%}
            - name: REDIS_HOST
              value: "{{ template "gitlab.redis.host" $ }}"
            - name: REDIS_PORT
              value: "{{ template "gitlab.redis.port" $ }}"
            {% endraw -%}
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ gitlab_secrets['passwords'] }}
                  key: redis

        # create the main 'gitlab' database as well as
        # the 'praefect' database if they do not exist
        - name: databases
          image: {{ postgresql_image }}
          imagePullPolicy: IfNotPresent
          command:
            - bash
          args:
            - -c
            - |
              # uses connection params added
              # by PG* environment variables

              echo "Checking '{{ gitlab_db_name }}' database..."
              db_found=$(psql -d postgres -tAc "
                SELECT COUNT(*) FROM pg_catalog.pg_database WHERE datname = '{{ gitlab_db_name }}'
              ") || exit $?
              echo "db_found=$db_found"

              [ "$db_found" -eq 1 ] || {
                echo -e "\nCreating '{{ gitlab_db_name }}' database..."
                psql -d postgres <<'EOT'

              -- https://www.postgresql.org/docs/current/sql-createdatabase.html
              CREATE DATABASE {{ gitlab_db_name }} WITH OWNER {{ gitlab_db_user }};
              REVOKE ALL ON DATABASE {{ gitlab_db_name }} FROM PUBLIC;
              GRANT  ALL ON DATABASE {{ gitlab_db_name }} TO {{ gitlab_db_user }};

              -- https://gitlab.com/gitlab-org/charts/gitlab/tree/master/templates/initdb-configmap.yaml
              -- superuser privileges are required to install extensions:
              -- https://www.postgresql.org/docs/current/sql-createextension.html
              CREATE EXTENSION IF NOT EXISTS pg_trgm    WITH SCHEMA public;
              CREATE EXTENSION IF NOT EXISTS btree_gist WITH SCHEMA public;
              EOT
              }
              echo -e "\nChecking '{{ praefect_db_name }}' database..."
              db_found=$(psql -d postgres -tAc "
                SELECT COUNT(*) FROM pg_catalog.pg_database WHERE datname = '{{ praefect_db_name }}'
              ") || exit $?
              echo "db_found=$db_found"

              [ "$db_found" -eq 1 ] || {
                echo -e "\nCreating '{{ praefect_db_name }}' database..."
                psql -d postgres <<'EOT'

              -- https://www.postgresql.org/docs/current/sql-createdatabase.html
              CREATE DATABASE {{ praefect_db_name }} WITH OWNER {{ gitlab_db_user }};
              REVOKE ALL ON DATABASE {{ praefect_db_name }} FROM PUBLIC;
              GRANT  ALL ON DATABASE {{ praefect_db_name }} TO {{ gitlab_db_user }};
              EOT
              }
              echo -e "\nDatabase initialization completed ✓"
          env:
            # https://www.postgresql.org/docs/current/libpq-envars.html
            - name: PGHOST
              value: {{ pgpool_service_host }}
            - name: PGUSER
              value: {{ postgresql_superuser }}
            - name: PGSSLMODE
              value: verify-full
            - name: PGSSLCERT
              value: /tls/tls.crt
            - name: PGSSLKEY
              value: /tls/tls.key
            - name: PGSSLROOTCERT
              value: /tls/ca.crt
          volumeMounts:
            - name: superuser-tls
              mountPath: /tls
              readOnly: true

      scriptTpl: |-
        #
        /scripts/wait-for-deps
        /scripts/db-migrate

    # toolbox pod is used for periodic housekeeping tasks
    # like backups, Sidekiq maintenance, and Rake tasks:
    # https://docs.gitlab.com/charts/charts/gitlab/toolbox
    toolbox:
      enabled: true

      resources:
        requests:
          cpu: 10m
          memory: 64Mi

      extraVolumes: |
        - name: minio-access
          secret:
            secretName: {{ gitlab_secrets['storage'] }}

      extraVolumeMounts: |
        - name: minio-access
          # mount path is expected by
          # the "configure" container
          mountPath: /init-secrets/minio/accesskey
          subPath: accesskey
          readOnly: true
        - name: minio-access
          mountPath: /init-secrets/minio/secretkey
          subPath: secretkey
          readOnly: true

    # https://docs.gitlab.com/charts/charts/gitlab/gitlab-shell
    gitlab-shell:
      enabled: true
      minReplicas: 1 # scaling via HPA
      maxReplicas: 2

      # https://docs.gitlab.com/administration/operations/gitlab_sshd
      sshDaemon: gitlab-sshd # or openssh

      # NOTE: metrics are not supported if
      # using default SSH daemon "openssh"
      metrics: &metrics-smon-http
        enabled: true
        serviceMonitor:
          enabled: true
          additionalLabels: &metrics-labels
            release: "{{ monitoring_release_name }}"
          endpointConfig:
            interval: 30s
            scheme: http

    # https://docs.gitlab.com/charts/charts/gitlab/gitaly
    gitaly:
      # enabled: true # set global.gitaly.enabled instead
      # global.praefect.virtualStorages[0].gitalyReplicas
      persistence: *gitaly-persistence

      resources:
        requests:
          cpu: 50m
          memory: 64Mi

      metrics: *metrics-smon-http

    # https://docs.gitlab.com/charts/charts/gitlab/praefect
    praefect:
      # enabled: true # set global.praefect.enabled instead
      replicas: 1

      resources:
        requests:
          cpu: 50m
          memory: 64Mi

      metrics: *metrics-smon-http

      extraInitContainers: |
        # wait until the 'praefect' database has
        # been created so the main container can
        # do needed initialization or migrations
        - name: wait-postgresql
          image: wait4x/wait4x
          imagePullPolicy: IfNotPresent
          command:
            - sh
          args:
            - -c
            - |
              wait4x --interval 3s --timeout 0 \
                postgresql "postgres://${POSTGRESQL_USERNAME}:${POSTGRESQL_PASSWORD}@${POSTGRESQL_HOST}:${POSTGRESQL_PORT}/${POSTGRESQL_DATABASE}?sslmode=disable"
          env:
            - name: POSTGRESQL_HOST
              value: "{{ pgpool_service_host }}"
            - name: POSTGRESQL_PORT
              value: "{{ pgpool_service_port }}"
            - name: POSTGRESQL_DATABASE
              value: {{ praefect_db_name }}
            - name: POSTGRESQL_USERNAME
              value: {{ gitlab_db_user }}
            - name: POSTGRESQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ gitlab_secrets['passwords'] }}
                  key: postgresql

    # https://docs.gitlab.com/charts/charts/gitlab/webservice
    webservice:
      enabled: true
      minReplicas: 1 # scaling via HPA
      maxReplicas: 2

      http:
        enabled: true # expose port 8080
      tls:
        enabled: true # expose port 8081
        secretName: "{{ gitlab_secrets['node-tls'] }}"

      workerTimeout: 60
      extraEnv:
        GITLAB_RAILS_RACK_TIMEOUT: "60"
        GITLAB_RAILS_WAIT_TIMEOUT: "90"

      resources:
        requests:
          cpu: 100m
          memory: 1Gi

      deployment:
        readinessProbe: &ws-readiness
          initialDelaySeconds: 0
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        livenessProbe: &ws-liveness
          initialDelaySeconds: 20
          periodSeconds: 60
          timeoutSeconds: 30
          successThreshold: 1
          failureThreshold: 3

      monitoring:
        exporter:
          enabled: true
      metrics: &metrics-smon-https
        enabled: true
        tls: *node-tls
        serviceMonitor: &metrics-mon-https
          enabled: true
          additionalLabels: *metrics-labels
          endpointConfig:
            interval: 30s
            scheme: https
            # monitoring-scraper-tls Secret must be recreated
            # in GitLab namespace where ServiceMonitors reside
            tlsConfig: "{{ metric_scraper_tls_config }}"

      workhorse:
        logFormat: text # text|json|structured

        # https://docs.gitlab.com/development/workhorse/configuration#cli-options
        # -authBackend is a workaround for the chart template hardcoding
        # webservice URL to use `http` scheme even though TLS is enabled:
        # https://gitlab.com/gitlab-org/charts/gitlab/issues/6131
        extraArgs: >-
          -authBackend https://localhost:8081

        tls: # required when global.workhorse.tls.enabled
          secretName: "{{ gitlab_secrets['node-tls'] }}"
          caSecretName: "{{ gitlab_secrets['certs'] }}"

        readinessProbe: *ws-readiness
        livenessProbe: *ws-liveness

        monitoring:
          exporter:
            enabled: true
            tls:
              enabled: true
        metrics:
          enabled: true
          serviceMonitor: *metrics-mon-https

    # https://docs.gitlab.com/charts/charts/gitlab/sidekiq
    sidekiq:
      enabled: true
      minReplicas: 1 # scaling via HPA
      maxReplicas: 2

      # one pod per Deployment per queue
      pods:
        # single worker
        - name: default

      resources:
        requests:
          cpu: 100m
          memory: 512Mi

      metrics:
        enabled: true
        tls: *node-tls
        podMonitor: *metrics-mon-https

    # https://docs.gitlab.com/charts/charts/gitlab/gitlab-pages
    gitlab-pages:
      # enabled: true # set global.pages.enabled instead
      logFormat: text # text|json|?

      hpa:
        minReplicas: 1
        maxReplicas: 2

      resources:
        requests:
          cpu: 100m
          memory: 256Mi

      metrics: *metrics-smon-https

    # https://docs.gitlab.com/charts/charts/gitlab/gitlab-exporter
    gitlab-exporter:
      enabled: true

    # https://docs.gitlab.com/charts/charts/gitlab/kas
    kas: {}

  # ==================================== End of Subcharts ====================================

  # we create our secrets manually, so
  # don't need this Job to create them:
  # https://docs.gitlab.com/charts/charts/shared-secrets
  shared-secrets:
    enabled: false

  # use the cluster-wide cert-manager
  # with configured StepClusterIssuer
  installCertmanager: false

  postgresql:
    # don't install PostgreSQL as we already
    # have a PostgreSQL HA cluster deployed
    install: false

  redis:
    # install single-instance via subchart because
    # GitLab doesn't support Redis in cluster mode:
    # https://docs.gitlab.com/administration/redis/replication_and_failover_external
    # https://docs.gitlab.com/charts/architecture/decisions#redis
    install: true
    auth:
      existingSecret: "{{ gitlab_secrets['passwords'] }}"
      existingSecretKey: redis

    cluster:
      enabled: false
    sentinel:
      enabled: false
    metrics:
      enabled: true

    master:
      persistence:
        enabled: true
        storageClass: "{{ storage_classes['default'] }}"
        accessModes: ["ReadWriteOnce"]
        size: 512Mi
      persistentVolumeClaimRetentionPolicy:
        enabled: true
        whenScaled: Retain
        whenDeleted: Delete

  # https://docs.gitlab.com/charts/charts/registry
  registry:
    # use Harbor registry instead
    enabled: false

  # https://docs.gitlab.com/charts/charts/nginx
  nginx-ingress:
    # use the default, cluster-wide
    # Nginx ingress controller with
    # TCP services for GitLab Shell
    enabled: false

  prometheus:
    # don't install Prometheus as we already
    # have a full monitoring stack deployed
    install: false

  # https://docs.gitlab.com/charts/charts/gitlab/gitlab-zoekt
  gitlab-zoekt:
    # disable Zoekt for now because it cannot connect to
    # webservice due to certificate signed by private CA:
    # https://gitlab.com/gitlab-org/cloud-native/charts/gitlab-zoekt/-/issues/28
    install: false
    replicas: 1

    indexStorageClassName: "{{ storage_classes['default'] }}"
    indexStorage: 512Mi

    resources:
      requests:
        cpu: 50m
        memory: 128Mi

    gateway:
      replicas: 1
      tls:
        certificate:
          enabled: true
          secretName: "{{ gitlab_secrets['node-tls'] }}"
      dnsResolver: "{{ rke_dns_host }}"

  # https://docs.gitlab.com/charts/charts/gitlab/gitlab-runner
  # https://docs.gitlab.com/runner/install/kubernetes_helm_chart_configuration
  gitlab-runner:
    install: false
    logFormat: text # text|json|runner

    # number of manager pods, not
    # pods that actually run jobs
    replicas: 1
    revisionHistoryLimit: 2

    # https://docs.gitlab.com/runner/install/kubernetes_helm_chart_configuration#run-with-non-root-user
    # https://gitlab.com/gitlab-org/ci-cd/gitlab-runner-ubi-images/container_registry/1766421?orderBy=PUBLISHED_AT&sort=desc&search%5B%5D=v18
    image:
      registry: registry.gitlab.com
      image: gitlab-org/ci-cd/gitlab-runner-ubi-images/gitlab-runner-ocp
      tag: v18.3.0
    # required when using gitlab-runner-ubi-images
    # see explanation in chart default values.yaml
    useTini: true

    securityContext:
      runAsNonRoot: true
      runAsUser: 999
      fsGroup: 999

    # https://docs.gitlab.com/runner/configuration/advanced-configuration#the-global-section
    # max concurrent jobs,
    # each run in own pod
    concurrent: 2
    # how frequent manager
    # checks for new jobs
    checkInterval: 5

    gitlabUrl: "{{ gitlab_service_url }}"

    runners:
      locked: null
      # NOTE: the .config chart value as a string
      # can be Helm-templated, so be careful with
      # Jinja2-templating using same {{ }} syntax
      config: |
        # https://docs.gitlab.com/runner/configuration/advanced-configuration#the-runners-section
        [[runners]]
          shell = "bash"

          # https://docs.gitlab.com/runner/configuration/advanced-configuration#the-runnerskubernetes-section
          [runners.kubernetes]
            namespace = "{{ gitlab_namespace }}"

            # https://docs.gitlab.com/runner/install/kubernetes_helm_chart_configuration#run-with-non-root-user
            # https://gitlab.com/gitlab-org/ci-cd/gitlab-runner-ubi-images/container_registry/1766433?orderBy=PUBLISHED_AT&sort=desc&search%5B%5D=v18
            helper_image = "registry.gitlab.com/gitlab-org/ci-cd/gitlab-runner-ubi-images/gitlab-runner-helper-ocp:v18.3.0"

            [runners.kubernetes.pod_security_context]
              run_as_non_root = true
              run_as_user = 59417
              fs_group = 59417

            # https://gitlab.com/gitlab-org/gitlab-runner/issues/38936
            [[runners.kubernetes.pod_spec]]
              name = "security"
              patch = '''
                securityContext:
                  appArmorProfile:
                    type: Localhost
                    localhostProfile: buildah
              '''
              # https://docs.gitlab.com/runner/executors/kubernetes#strategic-patch-strategy
              patch_type = "strategic"

            # https://docs.gitlab.com/runner/executors/kubernetes#cpu-requests-and-limits
            cpu_request = "500m"
            # https://docs.gitlab.com/runner/executors/kubernetes#memory-requests-and-limits
            memory_request = "8Gi"
            # https://docs.gitlab.com/runner/executors/kubernetes#storage-requests-and-limits
            ephemeral_storage_request = "20Gi"

          # https://docs.gitlab.com/runner/configuration/advanced-configuration#the-runnerscaches3-section
          [runners.cache]
            Type = "s3"
            Shared = true
            Path = "runners"

            [runners.cache.s3]
              ServerAddress = "{{ minio_service_host }}"
              BucketName = "{{ gitlab_buckets['cache'] }}"
              BucketLocation = "{{ minio_region }}"
              AuthenticationType = "access-key"
              Insecure = false
      cache:
        secretName: "{{ gitlab_secrets['storage'] }}"
    certsSecretName: "{{ gitlab_secrets['certs'] }}"

    # omit prometheus annotations
    # in the default chart values
    podAnnotations: {}

    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
        labels:
          release: "{{ monitoring_release_name }}"

    # https://docs.gitlab.com/runner/commands#signals
    terminationGracePeriodSeconds: 300

# form POST /admin/application_settings/<section>
gitlab_app_settings:

  general:
    # Settings > General > Sign-up restrictions
    application_setting[signup_enabled]:
      value: "false"
      # search for this unique element
      # attribute to get current value
      attribute: data-signup-enabled

    # Settings > General > Sign-in restrictions
    application_setting[after_sign_out_path]:
      value: https://{{ gitlab_fqdns['gitlab'] }}/
      # if no other property provided,
      # current value is in value="X"
      # attribute BEFORE name="{key}"
    application_setting[root_moved_permanently_redirection]:
      value: 1

  preferences:
    # Settings > Preferences > Localization
    application_setting[first_day_of_week]:
      value: 1 # Monday
      # search for name="{key}".+?"{search}"
      # BEFORE value="X"
      search: selected
    application_setting[time_tracking_limit_to_hours]:
      value: 1
      search: checkbox

# JSON POST /-/users/callouts
gitlab_user_callouts:
  - security_newsletter_callout
  - product_usage_data_collection_changes
