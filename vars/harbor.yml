# harbor_secret:     {vault.yml}
# harbor_db_pass:    {vault.yml}
# harbor_admin_pass: {vault.yml}

harbor_namespace: harbor
harbor_host_name: harbor # alias of "rancher"

# remember to add harbor.fourteeners.local to pfSense DNS
# as an alias of rancher.fourteeners.local: 192.168.0.164
# https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_filters.html#products
harbor_fqdn: "{{ [harbor_host_name] | product(search_domains) | map('join','.') | first }}"

harbor_url: https://{{ harbor_fqdn }}
harbor_default_project: library

harbor_secrets:
  ingress: harbor-ingress-tls

# https://goharbor.io/docs/latest/install-config/harbor-ha-helm/
# https://github.com/goharbor/harbor-helm/tree/main
harbor_chart_version: "1.17.1"
harbor_release_name: harbor

# https://github.com/goharbor/harbor-helm/tree/main/values.yaml
harbor_chart_values:
  externalURL: "{{ harbor_url }}"

  expose:
    # IMPORTANT! if using Traefik (K3s default) as ingress
    # controller, be sure to configure entrypoint settings
    # respondingTimeouts to avoid layer push failures (see
    # templates/k3s/traefik.yaml.j2 and
    # https://github.com/goharbor/harbor/issues/20472)
    type: ingress
    ingress:
      hosts:
        core: "{{ harbor_fqdn }}"
      className: "{{ k3s_ingress_class }}"
    tls:
      certSource: secret
      secret:
        # has keys "tls.crt" & "tls.key"
        secretName: "{{ harbor_secrets['ingress'] }}"
  # secret expected to have key "ca.crt"
  caSecretName: "{{ harbor_secrets['ingress'] }}"

  persistence:
    persistentVolumeClaim:
      # use NFS path on QNAP for high storage
      # components; use local-path for others
      registry:
        storageClass: "{{ storage_classes['nfs'] }}"
        size: 20Gi
      trivy:
        storageClass: "{{ storage_classes['nfs'] }}"
        size: 5Gi

  core:
    secret: "{{ harbor_secret }}"
    # xsrfKey must be exactly 32 chars
    xsrfKey: "{{ harbor_secret * 2 }}"
    # provide self-signed CA cert for token signing
    # so that Helm template won't generate new cert
    # each time, but need to update it when expired:
    # openssl genrsa -out ca.key -traditional 2048
    # openssl req -x509 -key ca.key -out ca.crt -sha256 -days 3650 \
    #   -subj /CN=harbor-token-ca -extensions v3_ca -config - <<EOF
    # [v3_ca]
    # keyUsage=critical,digitalSignature,keyEncipherment,keyCertSign
    # extendedKeyUsage=serverAuth,clientAuth
    # basicConstraints=critical,CA:true
    # subjectKeyIdentifier=hash
    # EOF
    # ansible-vault encrypt ca.key
    # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/file_lookup.html
    tokenCert: "{{ lookup('ansible.builtin.file', 'files/harbor/ca.crt', rstrip=false) }}"
    # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/unvault_lookup.html
    tokenKey: "{{ lookup('ansible.builtin.unvault', 'files/harbor/ca.key') }}"

  registry:
    secret: "{{ harbor_secret }}"
    credentials:
      username: "{{ harbor_admin_user }}"
      password: "{{ harbor_admin_pass }}"
      # username and password values will be ignored because
      # we set htpasswdString to a fixed string so that Helm
      # template won't generate a new string each time using
      # htpasswd function, which uses a random salt:
      # htpasswd -nbBC 10 $HARBOR_USER $HARBOR_PASS | \
      #                tr -d '\n' | sed 's/$2y/$2a/'
      htpasswdString: >-
        {{ harbor_admin_user }}:{{ harbor_admin_pass |
           ansible.builtin.password_hash('bcrypt', salt=bcrypt_salt, rounds=bcrypt_rounds) }}

  jobservice:
    secret: "{{ harbor_secret }}"
  database:
    internal:
      password: "{{ harbor_db_pass }}"
  harborAdminPassword: "{{ harbor_admin_pass }}"

  ipFamily:
    ipv6:
      enabled: false
  metrics:
    enabled: true

# user_erhhung:  {vault.yml}
# homelab_admin: {vault.yml}
harbor_users:
  - username: "{{ user_erhhung.username }}"
    realname: "{{ user_erhhung.fullname }}"
    email: "{{ user_erhhung.email }}"
    # 8+ chars w/ upper + lower + digit
    password: "{{ harbor_admin_pass }}"
    role: maintainer # project: library
    # comment: optional
  - username: gitlab
    realname: GitLab CI/CD
    email: "{{ homelab_admin.email }}"
    password: "{{ harbor_admin_pass }}"
    role: maintainer # project: library

# https://github.com/goharbor/harbor/tree/main/src/portal/src/app/shared/entities/shared.const.ts#L295-L309
harbor_roles:
  projectAdmin: 1
  maintainer: 4
  developer: 2
  guest: 3
  limitedGuest: 5

# system settings API payload:
# PUT /api/v2.0/configurations
harbor_settings:
  # Harbor UI user sessions
  session_timeout: 480 # minutes
  # Docker/Buildah sessions
  token_expiration: 120 # minutes
