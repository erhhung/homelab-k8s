# openwebui_admin_pass: {vault.yml}
# openwebui_secret_key: {vault.yml}
#    pipelines_api_key: {vault.yml}
#       openai_api_key: {vault.yml}

# API request body for
# /api/v1/auths/signup
openwebui_admin_user:
  name: "{{ user_erhhung.fullname }}"
  email: "{{ user_erhhung.email }}"
  password: "{{ openwebui_admin_pass }}"
  profile_image_url: "{{ user_erhhung.gravatar }}"

openwebui_namespace: open-webui
openwebui_host_names: # aliases of "homelab"
  - openwebui
  - chatgpt
  - chat

# remember to add openwebui.fourteeners.local (also chatgpt. and chat.)
# to pfSense DNS as aliases of homelab.fourteeners.local: 192.168.0.221
# https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_filters.html#products
openwebui_fqdns: "{{ openwebui_host_names | product(search_domains) | map('join','.') }}"

openwebui_secrets:
  env-vars: open-webui-env-variables
  database: open-webui-database-tls
  ingress: open-webui-ingress-tls

openwebui_db_name: openwebui
openwebui_db_user: openwebui

# https://docs.sqlalchemy.org/en/20/core/engines.html#database-urls
# https://docs.sqlalchemy.org/en/20/dialects/postgresql.html#ssl-connections
# https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-CONNSTRING-URIS
# (references "pgpool_service_url" var from vars/postgresql.yml)
openwebui_postgresql_url: >-
  {% set params = {
    'sslmode':     'verify-full',
    'sslcert':     '/tls/database/tls.crt',
    'sslkey':      '/tls/database/tls.key',
    'sslrootcert': '/tls/database/ca.crt'
  } -%}
  {% set items = params | dict2items -%}
  {% set params = items | map(attribute='key')    |
              zip(items | map(attribute='value')) |
                    map('join','=') -%}
  {% set query = params | join('&') -%}
  {{ pgpool_service_url | regex_replace('//',
     '//'~ openwebui_db_user ~':'~ pgpool_db_pass ~'@')
     }}/{{ openwebui_db_name }}?{{ query }}

# https://redis.readthedocs.io/en/stable/connections.html
# https://redis.readthedocs.io/en/stable/examples/ssl_connection_examples.html
# (references "valkey_service_url" var from vars/valkey.yml)
# ssl_cert_reqs: none|optional|required
openwebui_redis_url: >-
  {% set params = {
    'ssl_cert_reqs': 'required',
    'ssl_certfile':  '/tls/database/tls.crt',
    'ssl_keyfile':   '/tls/database/tls.key',
    'ssl_ca_certs':  '/tls/database/ca.crt'
  } -%}
  {% set items = params | dict2items -%}
  {% set params = items | map(attribute='key')    |
              zip(items | map(attribute='value')) |
                    map('join','=') -%}
  {% set query = params | join('&') -%}
  {{ valkey_service_url | regex_replace('//',
     '//:'~ valkey_pass ~'@') }}/0?{{ query }}

# PVC specs for "openwebui_pvcs"
openwebui_pvc_specs:
  vector-db:
    name: open-webui-vector-db
    class: default
    size: 2Gi
    mount: /app/backend/data/vector_db
  # even though storage provider is S3, Open WebUI
  # still keeps uploaded files in local filesystem:
  # https://github.com/open-webui/open-webui/discussions/15286
  uploads:
    name: open-webui-uploads
    class: single
    size: 2Gi
    mount: /app/backend/data/uploads
  cache:
    name: open-webui-cache
    class: single
    size: 4Gi
    mount: /app/backend/data/cache

# added to "openwebui_extras"
openwebui_pvcs: |
  {% set pvcs = [] %}
  {% for spec in openwebui_pvc_specs.values() %}
  {%   set _  = pvcs.append({
         'apiVersion': 'v1',
         'kind':       'PersistentVolumeClaim',
         'metadata': {
           'name': spec.name
         },
         'spec': {
           'storageClassName': storage_classes[spec.class],
           'accessModes': [
             'ReadWriteMany' if openwebui_replicas > 1 else 'ReadWriteOnce'
           ],
           'resources': {
             'requests': {
               'storage': spec.size
             }
           }
         }
       })   %}
  {% endfor %}
  {{ pvcs   }}

openwebui_volumes:
  - name: database-tls
    secret:
      secretName: "{{ openwebui_secrets['database'] }}"
      defaultMode: 416 # "0640"
  - |
    {% set vols = [] %}
    {% for name, spec in openwebui_pvc_specs.items() %}
    {%   set _  = vols.append({
           'name': name,
           'persistentVolumeClaim': {
             'claimName': spec.name
           }
         })   %}
    {% endfor %}
    {{ vols   }}

openwebui_mounts:
  - name: database-tls
    mountPath: /tls/database
    readOnly: true
  - |
    {% set mounts = [] %}
    {% for name, spec in openwebui_pvc_specs.items() %}
    {%   set _  = mounts.append({
           'name':      name,
           'mountPath': spec.mount
         })   %}
    {% endfor %}
    {{ mounts }}

openwebui_replicas: 1
openwebui_extras:
  - "{{ openwebui_pvcs }}"

# https://github.com/open-webui/helm-charts/tree/main/charts/open-webui
openwebui_chart_version: "6.28.0"
openwebui_release_name: open-webui

# Pipelines is open-webui subchart:
# https://github.com/open-webui/helm-charts/tree/main/charts/pipelines/values.yaml
pipelines_chart_values: &pipelines
  replicaCount: 1

  persistence:
    enabled: true

    storageClass: "{{ storage_classes['default'] }}"
    # use ReadWriteMany if replicaCount > 1
    accessModes: ["ReadWriteOnce"]
    # min XFS volume size is 300Mi
    size: 384Mi

# https://github.com/open-webui/helm-charts/tree/main/charts/open-webui/values.yaml
openwebui_chart_values:
  replicaCount: "{{ openwebui_replicas }}"
  revisionHistoryLimit: 2

  ollama:
    # don't install another Ollama as we
    # already have it running separately
    enabled: false
  ollamaUrls: "{{ [ollama_service_url] }}"

  enableOpenaiApi: true
  # if Pipelines is enabled, its endpoint
  # will be first in OPENAI_API_BASE_URLS
  openaiBaseApiUrl: https://api.openai.com/v1

  # use my own image with Redis Cluster
  # support (REDIS_CLUSTER_MODE="True")
  image:
    pullPolicy: Always
    # repository: ghcr.io/open-webui/open-webui
    repository: "{{ harbor_container_registry }}/library/open-webui"
    tag: latest

  # https://docs.openwebui.com/getting-started/env-configuration
  commonEnvVars:
    # https://docs.openwebui.com/getting-started/env-configuration/#important-note-on-persistentconfig-environment-variables
    - name: ENABLE_PERSISTENT_CONFIG
      value: "False"
    - name: USER_AGENT
      value: Open WebUI
    # enable API /docs
    # https://docs.openwebui.com/getting-started/api-endpoints/#swagger-documentation-links
    - name: ENV
      value: dev

  extraEnvVars:
    - name: WEBUI_URL
      value: https://{{ openwebui_fqdns | first }}
    # https://docs.openwebui.com/getting-started/env-configuration/#cors_allow_origin
    - name: CORS_ALLOW_ORIGIN
      value: https://{{ openwebui_fqdns | first }}
    # https://docs.openwebui.com/getting-started/env-configuration/#jwt_expires_in
    - name: JWT_EXPIRES_IN
      value: 8h
    - name: REDIS_URL
      value: "{{ openwebui_redis_url }}"
    # setting added in my fork and image to
    # use redis.cluster.RedisCluster client
    - name: REDIS_CLUSTER_MODE
      value: "True"
    - name: REDIS_KEY_PREFIX
      value: "{open-webui}"
    # MinIO TLS certificate validation:
    # https://docs.aws.amazon.com/sdkref/latest/guide/feature-gen-config.html
    - name: AWS_CA_BUNDLE
      value: /tls/database/ca.crt

  extraEnvFrom:
    - secretRef:
        name: "{{ openwebui_secrets['env-vars'] }}"

  pipelines:
    # install Pipelines subchart:
    # https://github.com/open-webui/pipelines
    enabled: true
    <<: *pipelines

  # Apache Tika is a content analysis toolkit
  # that can detect and extract metadata and
  # text from over 1000 different file types:
  # https://tika.apache.org/
  # NOTE: Open WebUI, out-of-the-box, without
  # Tika, can parse .txt/.md/.docx/.pdf/.html
  tika:
    enabled: false

  postgresql:
    # don't install PostgreSQL as we already
    # have a PostgreSQL HA cluster deployed
    enabled: false
  databaseUrl: "{{ openwebui_postgresql_url }}"

  websocket:
    enabled: true
    manager: redis
    redis:
      # use dedicated Redis since there
      # is no support for cluster mode
      # enabled: true
      # don't install Redis as we already
      # have a multi-node Valkey cluster
      enabled: false
    # define WEBSOCKET_REDIS_URL
    url: "{{ openwebui_redis_url }}"

  persistence:
    enabled: true

    # storage provider for uploaded files
    # if local: /app/backend/data/uploads
    provider: s3 # local/s3/gcs/azure
    # https://docs.openwebui.com/getting-started/env-configuration/#amazon-s3-storage
    s3:
      bucket: openwebui
      keyPrefix: uploads/
      accessKey: openwebui
      secretKeyExistingSecret: "{{ openwebui_secrets['env-vars'] }}"
      secretKeyExistingSecretKey: S3_SECRET_ACCESS_KEY
      # IMPORTANT: since Helm chart provides no method to specify
      # TLS config, environment var AWS_CA_BUNDLE must be defined
      endpointUrl: "{{ minio_service_url }}"
      region: "{{ minio_region }}"

  resources:
    requests:
      cpu: 50m
      memory: 768Mi
    limits:
      cpu: 1000m

  podSecurityContext:
    fsGroup: 2000
  containerSecurityContext:
    capabilities:
      drop: ["ALL"]
    readOnlyRootFilesystem: false
    runAsNonRoot: true
    runAsUser: 1000

  # mount database TLS secret and
  # PVCs for vector DB and cache
  volumes: "{{ openwebui_volumes | flatten }}"
  volumeMounts:
    container: "{{ openwebui_mounts | flatten }}"

  extraInitContainers:
    # create PostgreSQL database
    # openwebui if doesn't exist
    - name: init-database
      image: "{{ postgresql_image }}"
      imagePullPolicy: IfNotPresent
      command:
        - bash
      args:
        - -c
        - |
          # uses connection params added
          # by PG* environment variables
          db_found=$(psql -d postgres -tAc "
            SELECT COUNT(*) FROM pg_catalog.pg_database WHERE datname = '{{ openwebui_db_name }}'
          ") || exit $?
          echo "db_found=$db_found"

          [ "$db_found" -eq 1 ] || {
            echo -e "\nCreating '{{ openwebui_db_name }}' database..."
            psql -d postgres <<'EOT'
              -- https://www.postgresql.org/docs/current/sql-createdatabase.html
              CREATE DATABASE {{ openwebui_db_name }} WITH OWNER {{ openwebui_db_user }};
              REVOKE ALL ON DATABASE {{ openwebui_db_name }} FROM PUBLIC;
              GRANT  ALL ON DATABASE {{ openwebui_db_name }} TO {{ openwebui_db_user }};
          EOT
          }
          echo -e "\nDatabase initialization completed ✓"
      env:
        - name: PGHOST
          value: "{{ pgpool_service_host }}"
        - name: PGUSER
          value: "{{ openwebui_db_user }}"
        - name: PGSSLMODE
          value: verify-full
        - name: PGSSLCERT
          value: /tls/tls.crt
        - name: PGSSLKEY
          value: /tls/tls.key
        - name: PGSSLROOTCERT
          value: /tls/ca.crt
      volumeMounts:
        - name: database-tls
          mountPath: /tls
          readOnly: true

  readinessProbe:
    httpGet:
      path: /health/db
      port: http
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6

  livenessProbe:
    httpGet:
      path: /health
      port: http
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6

  managedCertificate:
    # create our own ingress
    # TLS secret via Ansible
    enabled: false

  ingress:
    enabled: true
    tls: true
    existingSecret: "{{ openwebui_secrets['ingress'] }}"
    class: "{{ rke_ingress_class }}"
    annotations:
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/backend-protocol: HTTP
      # https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/annotations/#custom-timeouts
      nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
      nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
      # allow uploading large files and prevent 413 (Entity
      # Too Large) errors; set to "0" to disable size limit:
      # https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/annotations/#custom-max-body-size
      nginx.ingress.kubernetes.io/proxy-body-size: 10m
    host: "{{ openwebui_fqdns[0] }}"
    additionalHosts: "{{ openwebui_fqdns[1:] }}"

  extraResources: "{{ openwebui_extras | flatten }}"

# user Settings > General > System prompt
# https://docs.openwebui.com/features/workspace/prompts/#prompt-variables
openwebui_system_prompt: |-
  {% raw -%}
  Today is {{CURRENT_DATE}}, and the time is {{CURRENT_TIME}}.
  User's name is {{USER_NAME}}, but address the user as "you".
  {%- endraw %}
