data_lv:
  lv: data-lv # name of logical volume
  vg: ubuntu-vg # name of volume group
  fs: xfs # volume filesystem type
  # unit capitalization: g=GB and G=GiB
  size: 95%FREE # size of logical volume
  mount: /data # path to mount volume

storage_classes:
  default: longhorn # 2 replicas
  single: longhorn-single # 1 replica
  static: longhorn-static
  local: local-storage
  nfs: nfs-qnap

snapshot_classes:
  backup: longhorn-backup

# cannot use any other namespace!
longhorn_namespace: longhorn-system

longhorn_secrets:
  minio: minio-credentials

# https://github.com/longhorn/charts/tree/master/charts/longhorn
longhorn_chart_version: "1.9.1"
longhorn_release_name: longhorn

# https://github.com/longhorn/charts/tree/v1.9.x/charts/longhorn/values.yaml
# https://longhorn.io/docs/1.9.0/references/settings/
longhorn_chart_values:
  longhornUI:
    replicas: 1

  persistence:
    defaultFsType: xfs
    # total copies of data
    defaultClassReplicaCount: 2
    # what happens when PVC is released
    reclaimPolicy: Delete
    # allow live migration of Longhorn
    # volumes from one node to another
    migratable: true

  defaultSettings:
    defaultDataPath: "{{ data_lv.mount }}"
    # prefer replicas of the same volume to be
    # on different nodes, but allow them to be
    # on the same node should space be limited
    replicaSoftAntiAffinity: true
    defaultReplicaCount: 2
    # Velero is configured to perform daily
    # backups with volume snapshot TTL of 1
    # week, so set snapshotMaxCount to >= 7
    snapshotMaxCount: 10

  defaultBackupStore:
    # user "longhorn" and "backups"
    # bucket to be created by MinIO
    backupTarget: s3://backups@{{ minio_region }}/longhorn
    backupTargetCredentialSecret: "{{ longhorn_secrets['minio'] }}"

  csi:
    # one extra replica should be enough
    # for all controllers (default is 3)
    provisionerReplicaCount: 2
    attacherReplicaCount: 2
    resizerReplicaCount: 2
    snapshotterReplicaCount: 2

  service:
    ui:
      type: Rancher-Proxy

  ingress:
    # access Longhorn UI via Rancher Server
    # console instead (see service.ui.type)
    enabled: false

  metrics:
    # scrapes longhorn-backend service (longhorn-manager
    # DaemonSet) on port 9500 (non-TLS) on path /metrics
    serviceMonitor:
      enabled: "{{ prometheus_crds_installed }}"
      additionalLabels:
        release: "{{ monitoring_release_name }}"

  extraObjects:
    # create VolumeSnapshotClass for remote backups (use
    # "bak" as parameters.type instead of "snap" because
    # in-cluster snapshots are useless in a DR scenario):
    # https://longhorn.io/docs/latest/snapshots-and-backups/csi-snapshot-support/csi-volume-snapshot-associated-with-longhorn-backup
    - apiVersion: snapshot.storage.k8s.io/v1
      kind: VolumeSnapshotClass
      metadata:
        name: "{{ snapshot_classes['backup'] }}"
        labels:
          # make Velero create VSs using this class
          velero.io/csi-volumesnapshot-class: "true"
      driver: driver.longhorn.io
      deletionPolicy: Delete
      parameters:
        type: bak
        backupMode: full

# https://computingforgeeks.com/configure-nfs-as-kubernetes-persistent-volume-storage/
nfs_mount_opts: rw,nosuid,nodev,noexec,hard,timeo=600,retrans=3,rsize=32768,wsize=32768

# https://github.com/kubernetes-sigs/nfs-subdir-external-provisioner/tree/master/charts/nfs-subdir-external-provisioner/values.yaml
# NOTE: storage class settings cannot be changed
# after creation without deletion and recreation
nfs_provisioners:
  - cluster: k3s
    name: qnap
    server: qnap.{{ homelab_domain }}
    path: /k8s_data/k3s
    storageClass:
      name: "{{ storage_classes['nfs'] }}"
      accessModes: ReadWriteOnce
      volumeBindingMode: Immediate
      reclaimPolicy: Delete
      onDelete: delete

  - cluster: rke
    name: qnap
    server: qnap.{{ homelab_domain }}
    path: /k8s_data/rke
    storageClass:
      name: "{{ storage_classes['nfs'] }}"
      accessModes: ReadWriteOnce
      volumeBindingMode: WaitForFirstConsumer
      reclaimPolicy: Delete
      onDelete: delete

# https://grafana.com/grafana/dashboards/?search=Longhorn&dataSource=prometheus
storage_grafana_dashboards:
  # https://grafana.com/grafana/dashboards/22705-longhorn-dashboard
  - title: Longhorn Dashboard
    gnet_id: 22705
    tags:
      - longhorn
      - storage
