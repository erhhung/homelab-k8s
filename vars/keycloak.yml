# keycloak_admin_pass: {vault.yml}

keycloak_namespace: keycloak
keycloak_host_names: # aliases of "homelab"
  - keycloak
  - iam
  - sso

# remember to add keycloak.fourteeners.local (also iam. and sso.) to
# pfSense DNS as aliases of homelab.fourteeners.local: 192.168.0.221
# https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_filters.html#products
keycloak_fqdns: "{{ keycloak_host_names | product(search_domains) | map('join','.') }}"

keycloak_secrets:
  passwords: keycloakx-passwords
  database: keycloakx-database-tls
  ingress: keycloakx-ingress-tls

keycloak_configmaps:
  dbsql: keycloakx-dbsql
  admin: keycloakx-admin

keycloak_db_name: keycloak
keycloak_db_user: keycloak
# use {{ pgpool_pass }}

# Java requires key file to be in PKCS#8 / DER format:
# openssl pkcs8 -topk8 -inform PEM -outform DER -in tls.key -nocrypt -out key.der
# https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-CONNSTRING-URIS
# (references "pgpool_service_url" var from vars/postgresql.yml)
# NOTE: don't include "user:pass@" in the URL as
# that gets interpreted as part of the host name
keycloak_jdbc_url: >-
  {% set params = {
    'ssl':         'true',
    'sslmode':     'verify-full',
    'sslcert':     '/opt/keycloak/tls/database/tls.crt',
    'sslkey':      '/opt/keycloak/tls/database/key.der',
    'sslrootcert': '/opt/keycloak/tls/database/ca.crt'
  } -%}
  {% set items = params | dict2items -%}
  {% set params = items | map(attribute='key')    |
              zip(items | map(attribute='value')) |
                    map('join','=') -%}
  {% set query = params | join('&') -%}
  jdbc:{{ pgpool_service_url }}/{{ keycloak_db_name }}?{{ query }}

# file is in "keycloakx-dbsql" ConfigMap
keycloak_sql_gz_b64: keycloak.sql.gz.b64

# https://github.com/codecentric/helm-charts/tree/master/charts/keycloakx
keycloakx_chart_version: "7.0.1"
keycloakx_release_name: keycloakx

# https://github.com/codecentric/helm-charts/tree/master/charts/keycloakx/values.yaml
keycloakx_chart_values:
  replicas: 1

  # must override command because container
  # by default just outputs help from kc.sh
  command:
    - /opt/keycloak/bin/kc.sh
    - start
    - --http-port=8080
    - --hostname-strict=false

    # https://www.keycloak.org/server/enabletls
    # mounted volume: /opt/keycloak/tls/ingress
    # IMPORTANT: container probes must use HTTPS
    - --https-certificate-file=/opt/keycloak/tls/ingress/tls.crt
    - --https-certificate-key-file=/opt/keycloak/tls/ingress/tls.key
    - --https-management-certificate-file=/opt/keycloak/tls/ingress/tls.crt
    - --https-management-certificate-key-file=/opt/keycloak/tls/ingress/tls.key

  # extraEnv is Helm template string:
  # https://github.com/codecentric/helm-charts/tree/master/charts/keycloakx#usage-of-the-tpl-function
  # should technically use {{ include "keycloak.fullname" . }} instead of "keycloakx",
  # but that would require {% raw %} {% endraw %} blocks to prevent Jinja2 evaluation.
  # KC_* environment variables reference: https://www.keycloak.org/server/all-config
  extraEnv: |
    # https://github.com/codecentric/helm-charts/tree/master/charts/keycloakx#jvm-settings
    - name: JAVA_OPTS
      value: >-
        -XX:MaxRAMPercentage=50.0
        -Djgroups.dns.query=keycloakx-headless

    # https://github.com/codecentric/helm-charts/tree/master/charts/keycloakx#creating-a-keycloak-admin-user
    # NOTE: per server warnings, KEYCLOAK_ADMIN and KEYCLOAK_ADMIN_PASSWORD are deprecated
    - name: KC_BOOTSTRAP_ADMIN_USERNAME
      value: admin
    - name: KC_BOOTSTRAP_ADMIN_PASSWORD
      valueFrom:
        secretKeyRef:
          name: {{ keycloak_secrets['passwords'] }}
          key: admin

    # https://stackoverflow.com/questions/55741524/keycloak-cant-connect-to-postgres-ssl-connection-is-required#77645265
    - name: KC_DB_URL
      value: {{ keycloak_jdbc_url }}

  # https://github.com/codecentric/helm-charts/tree/master/charts/keycloakx#using-an-external-database
  database:
    vendor: postgres
    hostname: "{{ pgpool_service_host }}"
    port: "{{ pgpool_service_port }}"
    database: "{{ keycloak_db_name }}"
    username: "{{ keycloak_db_user }}"
    password: "{{ pgpool_pass }}"

  dbchecker:
    enabled: true

  extraVolumes: |
    - name: database-tls
      secret:
        secretName: {{ keycloak_secrets['database'] }}
        defaultMode: 416 # "0640"
    - name: ingress-tls
      secret:
        secretName: {{ keycloak_secrets['ingress'] }}
    - name: keycloak-sql
      configMap:
        name: {{ keycloak_configmaps['dbsql'] }}
    - name: profile-sh
      configMap:
        name: {{ keycloak_configmaps['admin'] }}

  # keycloak container
  extraVolumeMounts: |
    - name: database-tls
      mountPath: /opt/keycloak/tls/database
      readOnly: true
    - name: ingress-tls
      mountPath: /opt/keycloak/tls/ingress
      readOnly: true
    - name: profile-sh
      mountPath: /etc/profile.d/sh.local
      subPath: profile.sh

  # run custom init container to bootstrap
  # the database using pg_dumped SQL script
  # https://github.com/codecentric/helm-charts/tree/master/charts/keycloakx#providing-a-custom-theme
  extraInitContainers: |
    - name: bootstrap
      image: {{ postgresql_image }}
      imagePullPolicy: IfNotPresent
      command:
        - bash
      args:
        - -c
        - |
          set -eo pipefail

          # uses connection params added
          # by PG* environment variables
          db_found=$(psql -d postgres -tAc "
            SELECT COUNT(*) FROM pg_catalog.pg_database WHERE datname = '{{ keycloak_db_name }}'
          ") || exit $?
          echo "db_found=$db_found"

          [ "$db_found" -eq 0 ] && num_tbls=-1 || \
            num_tbls=$(psql -d {{ keycloak_db_name }} -tAc "
              SELECT COUNT(*) FROM pg_catalog.pg_tables WHERE schemaname = 'public'
            ")
          echo "num_tbls=$num_tbls"

          [ "$num_tbls" -lt 1 ] || {
            echo -e "\nDatabase already bootstrapped ✓"
            exit 0
          }
          [ "$num_tbls" -eq -1 ] && {
            echo -e "\nCreating '{{ keycloak_db_name }}' database..."
            psql -d postgres <<'EOT'

          -- https://www.postgresql.org/docs/current/sql-createdatabase.html
          CREATE DATABASE {{ keycloak_db_name }} WITH OWNER {{ keycloak_db_user }};
          REVOKE ALL ON DATABASE {{ keycloak_db_name }} FROM PUBLIC;
          GRANT  ALL ON DATABASE {{ keycloak_db_name }} TO {{ keycloak_db_user }};
          EOT
          }
          echo -e "\nImporting database from keycloak.sql..."
          base64 -d /sql/{{ keycloak_sql_gz_b64 }} | gzip -dq | \
            psql -d {{ keycloak_db_name }} -v ON_ERROR_STOP=1 -e

          echo -e "\nDatabase bootstrapping completed ✓"
      env:
        # https://www.postgresql.org/docs/current/libpq-envars.html
        - name: PGHOST
          value: {{ pgpool_service_host }}
        - name: PGUSER
          value: {{ keycloak_db_user }}
        - name: PGSSLMODE
          value: verify-full
        - name: PGSSLCERT
          value: /tls/tls.crt
        - name: PGSSLKEY
          value: /tls/tls.key
        - name: PGSSLROOTCERT
          value: /tls/ca.crt
      volumeMounts:
        - name: database-tls
          mountPath: /tls
          readOnly: true
        - name: keycloak-sql
          mountPath: /sql
          readOnly: true

  resources:
    requests:
      cpu: 50m
      memory: 512Mi

  secrets:
    # creates "keycloakx-passwords" Secret
    passwords:
      stringData:
        admin: "{{ keycloak_admin_pass }}"

  http:
    # default: /auth
    relativePath: /
    internalPort: http-internal
    internalScheme: HTTPS

  ingress:
    enabled: true
    tls:
      - secretName: "{{ keycloak_secrets['ingress'] }}"
        hosts: "{{ keycloak_fqdns }}"
    ingressClassName: "{{ rke_ingress_class }}"

    annotations:
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      # https://github.com/codecentric/helm-charts/tree/master/charts/keycloakx#bad-gateway-and-proxy-buffer-size-in-nginx
      nginx.ingress.kubernetes.io/proxy-buffer-size: 128k
      # https://github.com/codecentric/helm-charts/tree/master/charts/keycloakx#prometheus-metrics-support
      # IMPORTANT! annotation group ServerSnippet has risk level Critical, so the
      # Nginx Ingress Controller config must be changed to accept that risk level
      # https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/annotations-risk
      nginx.ingress.kubernetes.io/server-snippet: |
        location ~* (/auth)?(/realms/[^/]+)?/metrics {
          return 403;
        }
    rules: |
      {% set rules = [] %}
      {% for fqdn in keycloak_fqdns %}
      {%   set _ = rules.append({
             'host': fqdn,
             'paths': [{
               'path':     '/',
               'pathType': 'Prefix',
             }],
           }) %}
      {% endfor %}
      {{ rules }}

  # https://github.com/codecentric/helm-charts/tree/master/charts/keycloakx#running-keycloak-behind-a-reverse-proxy
  # https://keycloak.discourse.group/t/error-after-upgrade-from-25-0-6-to-26-0-0/29207
  proxy:
    mode: xforwarded

  # customize container probes in order to set more
  # lienient initialDelaySeconds and timeoutSeconds
  startupProbe: |
    httpGet:
    {%- raw %}
      path: {{ .Values.http.relativePath | trimSuffix "/" }}/health
      port: {{ .Values.http.internalPort }}
      scheme: {{ .Values.http.internalScheme }}
    {% endraw -%}
    initialDelaySeconds: 60
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 60

  readinessProbe: |
    httpGet:
    {%- raw %}
      path: {{ .Values.http.relativePath | trimSuffix "/" }}/health/ready
      port: {{ .Values.http.internalPort }}
      scheme: {{ .Values.http.internalScheme }}
    {% endraw -%}
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 3

  livenessProbe: |
    httpGet:
    {%- raw %}
      path: {{ .Values.http.relativePath | trimSuffix "/" }}/health/live
      port: {{ .Values.http.internalPort }}
      scheme: {{ .Values.http.internalScheme }}
    {% endraw -%}
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 3

  metrics:
    enabled: true

  serviceMonitor:
    enabled: "{{ prometheus_crds_installed }}"
    labels:
      release: "{{ monitoring_release_name }}"
    interval: 60s # not heavily used service
    # tlsConfig will be patched in via task (monitoring-scraper-tls
    # Secret must be recreated in the Keycloak namespace where this
    # ServiceMonitor resides)

# https://grafana.com/grafana/dashboards/?search=Keycloak&dataSource=prometheus
keycloak_grafana_dashboards:
  # https://grafana.com/grafana/dashboards/19659-keycloak-metrics-dashboard
  - title: Keycloak Metrics Dashboard
    gnetId: 19659
    tags:
      - keycloak
