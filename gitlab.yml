# https://docs.gitlab.com/charts/installation
# https://docs.gitlab.com/charts/advanced
---
- name: Install GitLab CI/CD stack
  tags: install
  hosts: "{{ rke_control_plane_host }}"
  gather_facts: false
  vars_files:
    - vars/basics.yml
    - vars/kubernetes.yml
    - vars/postgresql.yml
    - vars/storage.yml
    - vars/minio.yml
    - vars/monitoring.yml
    - vars/gitlab.secrets.yml
    - vars/gitlab.yml
  vars: &vars
    # required kubernetes>=24.2 package only in user virtualenv
    ansible_python_interpreter: "{{ venv_python_interpreter }}"
    kubeconfig: "{{ rke_kubeconfig }}"
    secret_ns: "{{ gitlab_namespace }}"
    create_ns: false
    release: "{{ gitlab_release_name }}"
  pre_tasks:
    - name: Get the PostgreSQL image used
      # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/include_tasks_module.html
      ansible.builtin.include_tasks: tasks/postgresql/image.yml
      when: postgresql_image is not defined

    - name: Get CA certificates from PKI
      ansible.builtin.include_tasks: tasks/pki/cacerts.yml
      when: ca_certificates is not defined

    - name: Get current runner replicas
      # https://docs.ansible.com/ansible/latest/collections/kubernetes/core/k8s_info_module.html
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig }}"
        api_version: apps/v1
        kind: Deployment
        name: "{{ release }}-gitlab-runner"
        namespace: "{{ gitlab_namespace }}"
      register: runner_info

    - name: Set runner_replicas fact
      # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/set_fact_module.html
      ansible.builtin.set_fact:
        runner_replicas: >-
          {{ runner_info.resources[0].spec.replicas if
             runner_info.resources is truthy else 0 }}
  tasks:
    # cert also used by GitLab ingress
    - name: Create GitLab node secret
      vars:
        global_: "{{ gitlab_chart_values.global }}"
        storages: "{{ global_.praefect.virtualStorages }}"
        services:
          - praefect
          - gitaly-{{ storages[0].name }}
        svc_domains:
          - "{{ gitlab_namespace }}.svc.{{ cluster_domain }}"
          - "{{ gitlab_namespace }}.svc"
        secret_name: "{{ gitlab_secrets['node-tls'] }}"
        create_ns: true
        cert_name: gitlab-node
        sans_:
          - gitlab-node
          - "{{ gitlab_fqdns.values() }}"
          - "*.{{ gitlab_fqdns['pages'] }}"
          # include SANs for service pods
          - |
            {% set pods = [] %}
            {% for svc in services %}
            {%   set svc = gitlab_release_name ~'-'~ svc %}
            {%   set  _  = pods.append('*.'~ svc) %}
            {% endfor %}
            {{   pods | product(svc_domains) | map('join','.') }}
          - "{{ ['*'] | product(svc_domains) | map('join','.') }}"
          # workhorse to webservice
          - localhost
        sans: "{{ sans_ | flatten }}"
      ansible.builtin.include_tasks: tasks/k8s/secrets/tls.step.yml

    # https://docs.gitlab.com/runner/install/kubernetes_helm_chart_configuration#access-gitlab-with-a-custom-certificate
    - name: Create GitLab certs secret
      vars:
        domains:
          # include both external FQDN
          # and internal service domain
          - "{{ gitlab_fqdns['gitlab'] }}"
          - "{{ gitlab_service_host    }}"
          - "{{ gitlab_service_host | replace('.'~ cluster_domain, '') }}"
        bundle: "{{ ca_certificates | join('\n') }}"
        secret_name: "{{ gitlab_secrets['certs'] }}"
        secret_data: |
          {% set files = {'ca.crt': ca_certificates[1]} %}
          {% for domain in domains %}
          {%   set _ = files.update({domain ~'.crt': bundle}) %}
          {% endfor %}
          {{ files  }}
      ansible.builtin.include_tasks: tasks/k8s/secrets/generic.yml

    - name: Create GitLab storage secret
      vars:
        secret_name: "{{ gitlab_secrets['storage'] }}"
        secret_data:
          # `connection` is used as consolidated object storage config
          # and referenced by global.appConfig.object_store.connection
          # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/to_nice_yaml_filter.html
          connection: "{{ gitlab_minio_config |
            ansible.builtin.to_nice_yaml(indent=2, sort_keys=false) }}"
          # `accesskey` and `secretkey` are used as Runner cache
          # config and referenced by gitlab-runner.runners.cache:
          # https://docs.gitlab.com/runner/install/kubernetes_helm_chart_configuration#amazon-s3
          accesskey: "{{ gitlab_minio_config.aws_access_key_id }}"
          secretkey: "{{ gitlab_minio_config.aws_secret_access_key }}"
      ansible.builtin.include_tasks: tasks/k8s/secrets/generic.yml

    # only to install PostgreSQL extensions
    - name: Create database superuser secret
      ansible.builtin.include_tasks: tasks/postgresql/superuser.yml

    - name: Create GitLab database secret
      vars:
        secret_name: "{{ gitlab_secrets['database'] }}"
        cert_name: gitlab-database
        days: 365
        sans:
          - "{{ gitlab_db_user }}"
          - "{{ gitlab_db_user }}@{{ homelab_domain }}"
      ansible.builtin.include_tasks: tasks/k8s/secrets/tls.step.yml

    - name: Create GitLab passwords secret
      vars:
        secret_name: "{{ gitlab_secrets['passwords'] }}"
        secret_data:
          root: "{{ gitlab_root_pass }}"
          postgresql: "{{ pgpool_pass }}"
          redis: "{{ gitlab_secrets_data['redis'] }}"
          smtp: "{{ icloud_smtp.passwords['gitlab'] }}"
      ansible.builtin.include_tasks: tasks/k8s/secrets/generic.yml

    # create secrets generated by the
    # script: files/gitlab/secrets.sh
    - name: Create generated GitLab secrets
      vars:
        # gitlab_secrets_data is defined in vault-encrypted vars/gitlab.secrets.yml:
        # keys with "gitlab-" prefix will be secret names and their values are data
        # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/dict2items_filter.html
        secrets: |
          {{ gitlab_secrets_data |
             ansible.builtin.dict2items(key_name='name', value_name='data') |
             selectattr('name', 'search', '^gitlab-') }}
        secret_name: "{{ item.name }}"
        secret_data: "{{ item.data }}"
      ansible.builtin.include_tasks: tasks/k8s/secrets/generic.yml
      loop: "{{ secrets }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Create monitoring scraper secret
      ansible.builtin.include_tasks: tasks/monitoring/scraper.yml

    - name: Install GitLab stack Helm chart
      # https://docs.ansible.com/ansible/latest/collections/kubernetes/core/helm_module.html
      kubernetes.core.helm:
        kubeconfig: "{{ kubeconfig }}"
        chart_repo_url: https://charts.gitlab.io
        chart_ref: gitlab
        chart_version: "{{ gitlab_chart_version }}"
        release_name: "{{ gitlab_release_name }}"
        release_namespace: "{{ gitlab_namespace }}"
        release_values: "{{ gitlab_chart_values }}"
        history_max: "{{ helm_max_history }}"
        # atomic: true
        wait: true
        wait_timeout: 10m0s # requires wait=true
      # bootstrapping empty databases could take
      # a long time, with webservice and sidekiq
      # pods having to restart a few times
      timeout: 900
      # after container probes have been patched
      # by the next task, Helm upgrade fails due
      # to conflicting probe handlers, so ignore
      # just that specific error
      ignore_errors: true
      register: helm_install
      failed_when: >-
        helm_install is failed and helm_install.stderr is not search(
        'httpGet: Forbidden: may not specify more than 1 handler type')

    # default 3s timeout for readiness and liveness
    # probes are too optimistic for our environment
    - name: Patch GitLab container probes
      vars:
        res_kind: "{{ item.kind }}"
        res_name: "{{ gitlab_release_name }}-{{ item.name }}"
        res_ns: "{{ gitlab_namespace }}"
        probes: "{{ item.probes }}"
        global_: "{{ gitlab_chart_values.global }}"
        storages: "{{ global_.praefect.virtualStorages }}"
        zoekt: "{{ gitlab_chart_values['gitlab-zoekt'] }}"
      ansible.builtin.include_tasks: tasks/k8s/probes.yml
      when: item.when | default(true)
      loop:
        - kind: StatefulSet
          # resource name minus gitlab- prefix
          name: gitaly-{{ storages[0].name }}
          probes:
            gitaly:
              readinessProbe: &probe
                periodSeconds: 10
                timeoutSeconds: 5
              livenessProbe: *probe
        # the workhorse container probes had been
        # "exec /scripts/healthcheck", which sent
        # a non-HTTPS "GET / HTTP/1.1" request to
        # /dev/tcp/127.0.0.1/8181
        - kind: Deployment
          name: webservice-default
          probes:
            gitlab-workhorse:
              readinessProbe:
                httpGet:
                  path: /-/readiness
                  port: 8181
                  scheme: HTTPS
                exec: OMIT # mark for removal
              livenessProbe:
                httpGet:
                  path: /-/liveness
                  port: 8181
                  scheme: HTTPS
                exec: OMIT # mark for removal
        # the Zoekt chart templates only set each
        # probe's httpGet property, leaving other
        # properties as defaults without a way to
        # override them in values file
        - kind: StatefulSet
          name: gitlab-zoekt
          probes:
            zoekt-indexer: &zoekt-container
              readinessProbe: *probe
              livenessProbe: *probe
            zoekt-webserver: *zoekt-container
            zoekt-internal-gateway: *zoekt-container
          when: "{{ zoekt.install }}"
        - kind: Deployment
          name: gitlab-zoekt-gateway
          probes:
            zoekt-external-gateway:
              readinessProbe: *probe
              livenessProbe: *probe
          when: "{{ zoekt.install }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Import Grafana dashboards
      vars:
        dashboards: "{{ gitlab_grafana_dashboards }}"
      ansible.builtin.include_tasks: tasks/grafana/dashboards.yml
  any_errors_fatal: true

- name: Configure GitLab installation
  tags: configure
  hosts: localhost
  gather_facts: false
  vars_files:
    - vars/gitlab.yml
  vars:
    config_method: shell # uri|shell
    site_base: https://{{ gitlab_fqdns['gitlab'] }}
    # using YAML anchors allows re-evaluation of
    # facts in tasks to use their current values
    auth_headers_: &auth-headers
      Cookie: "{{ cookie_jar }}"
      X-CSRF-Token: "{{ csrf_token }}"
    html_headers_: &html-headers
      Origin: "{{ site_base }}"
      Referer: "{{ page_url }}"
      Accept: text/html
      <<: *auth-headers
    json_headers_: &json-headers
      Accept: application/json
      <<: *auth-headers
  pre_tasks:
    - name: Wait until GitLab is ready
      # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/uri_module.html
      ansible.builtin.uri:
        url: "{{ site_base }}/"
        follow_redirects: none
        status_code: [301, 302]
      # https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_loops.html#retrying-a-task-until-a-condition-is-met
      register: site_check
      retries: 20
      delay: 3
  tasks:
    - name: Authenticate as root user
      # skip because uri module issue:
      # https://github.com/ansible/ansible/issues/85780
      when: config_method == 'uri'
      vars:
        page_url: "{{ site_base }}/users/sign_in"
      block:
        - name: Get CSRF token from page
          vars:
            referer: "{{ site_base }}/"
          ansible.builtin.include_tasks: tasks/gitlab/csrftoken.yml
          # sets facts: csrf_token, page_html, cookie_jar

        - name: Authenticate as root user
          ansible.builtin.uri:
            method: POST
            url: "{{ page_url }}"
            # makes no sense why must follow redirects
            # so .cookies is available when Set-Cookie
            # are already returned in the 302 response
            follow_redirects: all
            headers: *html-headers
            body_format: form-urlencoded
            body:
              user[login]: root
              user[password]: "{{ gitlab_root_pass }}"
            # status_code: [302]
          register: root_login

        - name: Save issued cookies
          vars:
            cookies_in: "{{ cookie_jar }}"
            uri_result: "{{ root_login }}"
          ansible.builtin.include_tasks: tasks/cookiejar.yml
          # updates cookie_jar fact

    - name: Set application settings
      when: config_method == 'uri'
      vars:
        section: "{{ item.section }}"
        settings: "{{ item.settings }}"
      ansible.builtin.include_tasks: tasks/gitlab/settings.yml
      # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/dict2items_filter.html
      loop: "{{ gitlab_app_settings |
        ansible.builtin.dict2items(key_name='section', value_name='settings') }}"
      loop_control:
        label: "{{ item.section }}"

    # script will always perform apply,
    # not checking if settings changed
    - name: Configure by shell script
      when: config_method == 'shell'
      # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/shell_module.html
      ansible.builtin.shell: |
        {{ lookup('ansible.builtin.template', template_dir ~ '/gitlab/configure.sh.j2') }}
      register: configure_sh
      changed_when: configure_sh.stdout is search(':.*(302|200)')
      failed_when: configure_sh.stdout is search(':.*500') or configure_sh.rc != 0
      # outputs RUNNER_TOKEN

    - name: Set the runner_token fact
      when: config_method == 'shell'
      ansible.builtin.set_fact:
        runner_token: >-
          {% set lines = configure_sh.stdout_lines | select('search','^RUNNER_TOKEN=') | list -%}
          {{ lines[0].split('RUNNER_TOKEN=')[1] if lines is truthy else none }}
  any_errors_fatal: true

# requires non-empty runner_token
# fact to be set in previous play
- name: Configure and launch runner
  tags: configure
  hosts: "{{ rke_control_plane_host }}"
  gather_facts: false
  vars_files:
    - vars/kubernetes.yml
    - vars/gitlab.yml
  vars:
    <<: *vars
    facts: "{{ hostvars['localhost'] }}"
    token: "{{ facts['runner_token'] | default(none) }}"
  tasks:
    - name: Create GitLab runner secret
      vars:
        secret_name: "{{ gitlab_secrets['runner'] }}"
        secret_data:
          runner-registration-token: ""
          runner-token: "{{ token }}"
        if_changed: Scale runner to 1 replica
      ansible.builtin.include_tasks: tasks/k8s/secrets/generic.yml
      when: token is truthy
  handlers:
    - name: Scale runner to 1 replica
      # https://docs.ansible.com/ansible/latest/collections/kubernetes/core/k8s_module.html
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        api_version: apps/v1
        kind: Deployment
        name: "{{ release }}-gitlab-runner"
        namespace: "{{ gitlab_namespace }}"
        definition:
          spec:
            replicas: 1
        state: patched
        wait: true
  any_errors_fatal: true
