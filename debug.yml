---
- name: Show remote and local facts
  tags: facts
  hosts: control_plane
  gather_facts: true
  pre_tasks:
    - name: Gather facts about controller
      # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/include_tasks_module.html
      ansible.builtin.include_tasks: tasks/localfacts.yml
  tasks:
    - name: Dump "ansible_facts"
      # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/debug_module.html
      ansible.builtin.debug:
        var: ansible_facts

    - name: Dump "ansible_local"
      ansible.builtin.debug:
        var: ansible_local

    - name: Local Python interpreter
      ansible.builtin.debug:
        var: local_python_interpreter

    - name: Local timezone offset
      ansible.builtin.debug:
        var: local_tz_offset

- name: Show hosts and domain names
  tags: hosts
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Show inventory groups
      ansible.builtin.debug:
        msg: |-
          groups['all']:              {{ groups['all'] }}
          groups['k8s_all']:          {{ groups['k8s_all'] }}
          groups['cluster']:          {{ groups['cluster'] }}
          groups['control_plane']:    {{ groups['control_plane'] }}
          groups['control_plane_ha']: {{ groups['control_plane_ha'] }}
          groups['workers']:          {{ groups['workers'] }}
          groups['workers_ha']:       {{ groups['workers_ha'] }}

    - name: Generate cluster FQDNs
      vars:
        search_domains: ["fourteeners.local"]
        rke_cluster_name: homelab
        rke_fqdns: >
          {{ ([rke_cluster_name] + groups['control_plane']) |
               product(search_domains) | map('join','.') }}
      ansible.builtin.debug:
        msg: |-
          rke_fqdns[0]:  {{ rke_fqdns[0]  }}
          rke_fqdns[1:]: {{ rke_fqdns[1:] }}

    - name: Generate subdomain FQDNs
      vars:
        search_domains: ["fourteeners.local"]
        subdomain: thanos
        thanos_hosts:
          - query
          - rule
          - store
        thanos_pqdns: "{{ thanos_hosts | map('regex_replace', '$', '.'~ subdomain) }}"
        thanos_fqdns: "{{ thanos_pqdns | product(search_domains) | map('join', '.') }}"
      ansible.builtin.debug:
        var: thanos_fqdns

    - name: Generate hosts entries
      vars:
        search_domains:
          - fourteeners.local
          - erhhungyuan.com
        rke_cluster_name: homelab
        rke_ha_mode: true
        k8s_hosts: |
          {% set hosts = groups['k8s_all'] %}
          {% if rke_ha_mode %}
          {%   set _ = hosts.append(rke_cluster_name) %}
          {% endif %}
          {{ hosts }}
        host_ip: "{{ hostvars[host]['ansible_host'] }}"
        # if HA mode, the host "homelab" (cluster name) has its own virtual IP
        # if not HA mode, homelab is an alias for the first control plane node
        host_names: |
          {% set use_alias = not rke_ha_mode and host == rke_control_plane_host %}
          {{ [host, rke_cluster_name] if use_alias else [host] }}
        host_fqdns: "{{ host_names | product(search_domains) | map('join', '.')  | list }}"
        host_pairs: "{{ host_fqdns | map('regex_replace', '^([^.]+)', '\\1 \\1') | list }}"
        host_entry: "{{ ([host_ip] + (host_pairs | join(' ')) | split | unique) | join(' ') }}"
      ansible.builtin.debug:
        msg: "{{ host_entry }}"
      loop: "{{ k8s_hosts }}"
      loop_control:
        loop_var: host
        label: "{{ host_ip }}|{{ host }}"

- name: Show certificates on CA server
  tags: certs
  hosts: _pki
  gather_facts: false
  tasks:
    - name: Fetch cert file
      # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/command_module.html
      ansible.builtin.command: cat certs/rancher.pem
      register: cat_cert
      changed_when: false

    - name: Print PEM output
      ansible.builtin.debug:
        msg: "{{ cat_cert.stdout }}"

    - name: Print cert secret
      vars:
        # split chain into individual certs:
        # host, intermediate CA, and root CA
        # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/regex_findall_filter.html
        chain: |
          {{ cat_cert.stdout | ansible.builtin.regex_findall(
            '(-----BEGIN CERTIFICATE-----(?:\n\S+)+\n-----END CERTIFICATE-----)',
             multiline=true) }}
        secret:
          # tls.crt: host and intermediate CA certs
          tls.crt: "{{ chain[:-1] | join('\n') }}"
          ca.crt: "{{  chain[-1:] | join('\n') }}"
      ansible.builtin.debug:
        var: secret

    - name: Show unvaulted key
      ansible.builtin.debug:
        # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/unvault_lookup.html
        msg: "ca.key: {{ lookup('ansible.builtin.unvault', 'files/harbor/ca.key') }}EOF"

- name: Dump Helm chart values files
  tags: values
  hosts: localhost
  gather_facts: false
  vars_files:
    - vars/kubernetes.yml
    - vars/storage.yml
    - vars/harbor.yml
  tasks:
    - name: Write Helm chart values file
      # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/shell_module.html
      ansible.builtin.shell: |
        set -o pipefail
        jq <<'EOF' | yq -pj -oy > /tmp/{{ item.dest }}
        {{ item.json }}
        EOF
      args:
        executable: /bin/bash
      loop:
        - json: "{{ harbor_chart_values | to_json }}"
          dest: values-harbor.yaml
      loop_control:
        label: "{{ item.dest }}"
      changed_when: true

- name: Debug basic Ansible/Jinja syntax
  tags: syntax
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Create IP address range
      vars:
        rke_lb_vip: 192.168.0.221
        valkey_cluster_nodes: 6
        valkey_lb_ips: |
          {% set ips = [] %}
          {% for i in range(valkey_cluster_nodes) %}
          {%   set _ = ips.append(rke_lb_vip | ansible.utils.ipmath(i+1)) %}
          {% endfor %}
          {{ ips }}
      ansible.builtin.debug:
        var: valkey_lb_ips

    - name: Flatten nested lists
      vars:
        add_list:
          - id: 1
            names: ["foo", "bar"]
          - id: 2
            names: ["bar", "baz"]
        the_list: |
          {% set items = [] %}
          {% set _ = items.append(add_list) %}
          {# https://docs.ansible.com/ansible/latest/collections/ansible/builtin/flatten_filter.html #}
          {{ items | ansible.builtin.flatten }}
      ansible.builtin.debug:
        var: the_list

- name: Debug expressions and statements
  tags: exprs
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Select items not in list
      vars:
        all_list: ["foo", "bar", "baz", "qux"]
        bad_list: ["bar", "qux"]
        # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/difference_filter.html
        the_list: "{{ all_list | ansible.builtin.difference(bad_list) }}"
      ansible.builtin.debug:
        var: the_list

    - name: Debug filtering functions
      vars:
        vc_pods:
          - ^kube-system/coredns-.*$
        get_pods: # kubernetes.core.k8s_info
          resources:
            - metadata:
                name: coredns-668c87c5d8-mjp84
                namespace: kube-system
            - metadata:
                name: argocd-application-controller-0
                namespace: argocd
        user_pods: |
          {% set pods = [] %}
          {% for meta in get_pods.resources | map(attribute='metadata') %}
          {%   set desc = meta.namespace ~'/'~ meta.name %}
          {#   use namespace() to create a scoped object #}
          {#   https://jinja.palletsprojects.com/en/stable/templates/#assignments #}
          {%   set pod = namespace(desc=desc, found=false) %}
          {%   for regex in vc_pods %}
          {%     if not pod.found and pod.desc | regex_search(regex) %}
          {%        set pod.found = true %}
          {%     endif %}
          {%   endfor  %}
          {%   if not pod.found %}
          {%     set _ = pods.append({
                   'name':      meta.name,
                   'namespace': meta.namespace
                 })  %}
          {%   endif %}
          {% endfor  %}
          {{ pods    }}
      ansible.builtin.debug:
        var: user_pods

    - name: Debug regular expressions
      vars:
        find: install
        text: Host purged; no K3s/Rancher; before installing RKE2
        # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/search_test.html
        # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/regex_escape_filter.html
        found: "{{ text is search(find | regex_escape, ignorecase=true) }}"
      ansible.builtin.debug:
        msg: |2-
           find: {{ find }}
           text: {{ text }}
          found: {{ found }}

    - name: Debug certificate SANs
      vars:
        fqdns:
          - foo1.fourteeners.local
          - foo2.fourteeners.local
        sans_:
          - foo
          - "{{ fqdns }}"
          - "*.foo.svc.cluster.local"
          - "*.foo.svc"
          - admin@fourteeners.local
          - 192.168.0.222
          - 192.168.0.223
        sans: "{{ sans_ | flatten }}"
        cn: "{{ sans | first }}"
        ips: "{{ sans | select('search', '^[0-9]+\\.') }}"
        emails: "{{ sans | select('search', '@') }}"
        # too bad ansible.builtin.difference filter
        # does not maintain the original list order
        dns: |
          {% set dns = [] %}
          {% for san in sans %}
          {%   if san not in ips and san not in emails
                                 and san is search('\\.') %}
          {%     set _ = dns.append(san) %}
          {%   endif %}
          {% endfor %}
          {% if dns | length > 0 and cn != dns[0] %}
          {%   set _ = dns.insert(0, cn) %}
          {% endif %}
          {{ dns   }}
        usages: |
          {% set usages = ['digital signature'] %}
          {% if dns is truthy or ips is truthy  %}
          {%   set _ = usages.append('key encipherment') %}
          {%   set _ = usages.append('server auth')      %}
          {% endif %}
          {% if emails is truthy %}
          {%   set _ = usages.append('client auth') %}
          {% endif  %}
          {{ usages }}
      ansible.builtin.debug:
        msg: |2-
              commonName: {{ cn  }}
                dnsNames: {{ dns }}
             ipAddresses: {{ ips }}
          emailAddresses: {{ emails }}
                  usages: {{ usages }}

    - name: Debug create query string
      vars:
        query_params:
          ssl: "true"
          sslmode: verify-full
          sslcert: /tmp/tls/tls.crt
          sslkey: /tmp/tls/tls.key
          sslrootcert: /tmp/tls/ca.crt
        query_string: |-
          {% set  items = query_params | dict2items -%}
          {% set params = items | map(attribute='key')    |
                      zip(items | map(attribute='value')) |
                      map('join','=') -%}
          {{ params | join('&') }}
      ansible.builtin.debug:
        var: query_string

- name: Debug various Ansible filters
  tags: filters
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Debug password_hash filter
      vars:
        credentials:
          user11: password1
          user12: password1
          user21: password2
          user22: password2
        # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/password_hash_filter.html
        # (requires Python packages "passlib" and "bcrypt==4.0.1" on Ansible controller)
        # bcrypt_salt is group var (must be exactly 22 characters) defined in common.yml
        username_hash: "{{ item[0] | ansible.builtin.password_hash('bcrypt', salt=bcrypt_salt, rounds=bcrypt_rounds) }}"
        custom_salt: "{{ username_hash[-1 * bcrypt_salt | length :]}}"
        password_hash: "{{ item[1] | ansible.builtin.password_hash('bcrypt', salt=custom_salt, rounds=bcrypt_rounds) }}"
      ansible.builtin.debug:
        var: password_hash
      loop: "{{ credentials.items() }}"
      loop_control:
        label: "{{ item[0] }}"

    - name: Debug dict2items filter
      vars:
        users:
          alice:
            age: 18
            email: alice@example.com
          bob:
            age: 21
            email: bob@example.com
      ansible.builtin.debug:
        var: item
      # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/dict2items_filter.html
      loop: "{{ users | ansible.builtin.dict2items(key_name='user', value_name='info') }}"
      loop_control:
        label: "{{ item.user }}"

    - name: Debug dict_kv filter
      vars:
        dashboards:
          - title: Istio Mesh Dashboard
            gnetId: 7639
          - title: Istio Ztunnel Dashboard
            gnetId: 21306
          - title: Istio Service Dashboard
            gnetId: 7636
          - title: Istio Workload Dashboard
            gnetId: 7630
          - title: Istio Performance Dashboard
            gnetId: 11829
          - title: Istio Control Plane Dashboard
            gnetId: 7645
          - title: Istio Wasm Extension Dashboard
            gnetId: 13277
        # https://docs.ansible.com/ansible/latest/collections/community/general/dict_kv_filter.html
        names: "{{ dashboards | map(attribute='title') | map('community.general.dict_kv', 'name') }}"
      ansible.builtin.debug:
        var: names

    - name: Is truthy expression
      vars:
        expressions:
          - desc: empty string
            expr: ""
          - desc: 1-item list
            expr: ["foo"]
          - desc: empty list
            expr: []
          - desc: 1-key dict
            expr: { foo: bar }
          - desc: empty dict
            expr: {}
          - desc: number one
            expr: 1
          - desc: number zero
            expr: 0
      ansible.builtin.debug:
        msg: "{{ item.desc }}: {{ item.expr is truthy }}"
      loop: "{{ expressions }}"
      loop_control:
        label: "{{ item.desc }}"

- name: Debug various Ansible lookups
  tags: lookups
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Debug url lookup
      vars:
        url: https://raw.githubusercontent.com/intel/intel-device-plugins-for-kubernetes/refs/heads/main/deployments/nfd/overlays/node-feature-rules/node-feature-rules.yaml
        # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/url_lookup.html
        content: "{{ lookup('ansible.builtin.url', url, split_lines=false) | from_yaml }}"
      ansible.builtin.debug:
        var: content

    # lookup_plugins/one_bucket_iam_policy.py
    - name: Custom one_bucket_iam_policy lookup
      vars:
        rw_policy: "{{ lookup('one_bucket_iam_policy', 'backups') }}"
        ro_policy: "{{ lookup('one_bucket_iam_policy', 'configs', readonly=true) }}"
        policies: "{{ {
          'rw_policy': rw_policy,
          'ro_policy': ro_policy,
          } }}"
      ansible.builtin.debug:
        var: policies

- name: Ansible quirks and behaviors
  tags: quirks
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Modify loaded variable
      block:
        - name: Include vars/wave.yml
          # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/include_vars_module.html
          ansible.builtin.include_vars: vars/wave.yml

        - name: Add extra annotations
          vars:
            extras:
              extra-secrets: another-secret
            annotations: |
              {% set annos = wave_optin_annotation %}
              {% for anno, value in extras.items() %}
              {%   set _ = annos.update({
                     'wave.pusher.com/' ~ anno: value
                   })   %}
              {% endfor %}
              {{ annos  }}
          ansible.builtin.debug:
            var: annotations

        - name: wave_optin_annotation
          ansible.builtin.debug:
            var: wave_optin_annotation

- name: Useful collection of tasks
  tags: tasks
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Exit the play successfully
      # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/meta_module.html
      ansible.builtin.meta: end_play
